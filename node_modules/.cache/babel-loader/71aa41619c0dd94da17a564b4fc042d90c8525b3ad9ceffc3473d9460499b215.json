{"ast":null,"code":"export class DifficultySystem {\n  constructor() {\n    this.currentDifficulty = 'medium';\n    this.difficultySettings = {\n      easy: {\n        name: 'Easy',\n        enemySpawnRate: 2000,\n        // 2 seconds\n        enemySpeed: 1.5,\n        enemyHealth: 1,\n        bossSpawnRate: 60000,\n        // 1 minute\n        bossHealth: 50,\n        powerUpSpawnRate: 8000,\n        // 8 seconds\n        playerHealth: 100,\n        playerSpeed: 5,\n        scoreMultiplier: 1.0\n      },\n      medium: {\n        name: 'Medium',\n        enemySpawnRate: 1000,\n        // 1 second\n        enemySpeed: 2.0,\n        enemyHealth: 1,\n        bossSpawnRate: 30000,\n        // 30 seconds\n        bossHealth: 100,\n        powerUpSpawnRate: 5000,\n        // 5 seconds\n        playerHealth: 50,\n        playerSpeed: 4,\n        scoreMultiplier: 1.5\n      },\n      hard: {\n        name: 'Hard',\n        enemySpawnRate: 500,\n        // 0.5 seconds\n        enemySpeed: 3.0,\n        enemyHealth: 2,\n        bossSpawnRate: 20000,\n        // 20 seconds\n        bossHealth: 200,\n        powerUpSpawnRate: 3000,\n        // 3 seconds\n        playerHealth: 25,\n        playerSpeed: 3,\n        scoreMultiplier: 2.0\n      }\n    };\n  }\n  getCurrentDifficulty() {\n    return this.currentDifficulty;\n  }\n  setDifficulty(difficulty) {\n    this.currentDifficulty = difficulty;\n  }\n  getDifficultySettings() {\n    return this.difficultySettings[this.currentDifficulty];\n  }\n  getDifficultySettingsFor(difficulty) {\n    return this.difficultySettings[difficulty];\n  }\n  getAllDifficulties() {\n    return Object.values(this.difficultySettings);\n  }\n  getDifficultyName() {\n    return this.difficultySettings[this.currentDifficulty].name;\n  }\n  getEnemySpawnRate() {\n    return this.difficultySettings[this.currentDifficulty].enemySpawnRate;\n  }\n  getEnemySpeed() {\n    return this.difficultySettings[this.currentDifficulty].enemySpeed;\n  }\n  getEnemyHealth() {\n    return this.difficultySettings[this.currentDifficulty].enemyHealth;\n  }\n  getBossSpawnRate() {\n    return this.difficultySettings[this.currentDifficulty].bossSpawnRate;\n  }\n  getBossHealth() {\n    return this.difficultySettings[this.currentDifficulty].bossHealth;\n  }\n  getPowerUpSpawnRate() {\n    return this.difficultySettings[this.currentDifficulty].powerUpSpawnRate;\n  }\n  getPlayerHealth() {\n    return this.difficultySettings[this.currentDifficulty].playerHealth;\n  }\n  getPlayerSpeed() {\n    return this.difficultySettings[this.currentDifficulty].playerSpeed;\n  }\n  getScoreMultiplier() {\n    return this.difficultySettings[this.currentDifficulty].scoreMultiplier;\n  }\n\n  // Dynamic difficulty adjustment based on player performance\n  adjustDifficultyBasedOnPerformance(score, lives, gameTime) {\n    const performanceScore = score / 1000 + lives * 100 + gameTime / 1000;\n    if (performanceScore > 1000 && this.currentDifficulty === 'easy') {\n      this.currentDifficulty = 'medium';\n    } else if (performanceScore > 2000 && this.currentDifficulty === 'medium') {\n      this.currentDifficulty = 'hard';\n    } else if (performanceScore < 500 && this.currentDifficulty === 'hard') {\n      this.currentDifficulty = 'medium';\n    } else if (performanceScore < 200 && this.currentDifficulty === 'medium') {\n      this.currentDifficulty = 'easy';\n    }\n  }\n\n  // Progressive difficulty increase\n  increaseDifficulty(score) {\n    const scoreThresholds = {\n      easy: 10000,\n      medium: 50000,\n      hard: 100000\n    };\n    if (score >= scoreThresholds[this.currentDifficulty]) {\n      switch (this.currentDifficulty) {\n        case 'easy':\n          this.currentDifficulty = 'medium';\n          break;\n        case 'medium':\n          this.currentDifficulty = 'hard';\n          break;\n        case 'hard':\n          // Already at maximum difficulty\n          break;\n      }\n    }\n  }\n\n  // Get difficulty description\n  getDifficultyDescription() {\n    switch (this.currentDifficulty) {\n      case 'easy':\n        return 'Relaxed gameplay with slower enemies and more health';\n      case 'medium':\n        return 'Balanced challenge with moderate enemy speed and health';\n      case 'hard':\n        return 'Intense gameplay with fast enemies and limited health';\n      default:\n        return 'Unknown difficulty';\n    }\n  }\n\n  // Get difficulty color for UI\n  getDifficultyColor() {\n    switch (this.currentDifficulty) {\n      case 'easy':\n        return '#00ff00';\n      case 'medium':\n        return '#ffaa00';\n      case 'hard':\n        return '#ff0000';\n      default:\n        return '#ffffff';\n    }\n  }\n}","map":{"version":3,"names":["DifficultySystem","constructor","currentDifficulty","difficultySettings","easy","name","enemySpawnRate","enemySpeed","enemyHealth","bossSpawnRate","bossHealth","powerUpSpawnRate","playerHealth","playerSpeed","scoreMultiplier","medium","hard","getCurrentDifficulty","setDifficulty","difficulty","getDifficultySettings","getDifficultySettingsFor","getAllDifficulties","Object","values","getDifficultyName","getEnemySpawnRate","getEnemySpeed","getEnemyHealth","getBossSpawnRate","getBossHealth","getPowerUpSpawnRate","getPlayerHealth","getPlayerSpeed","getScoreMultiplier","adjustDifficultyBasedOnPerformance","score","lives","gameTime","performanceScore","increaseDifficulty","scoreThresholds","getDifficultyDescription","getDifficultyColor"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/DifficultySystem.ts"],"sourcesContent":["export interface DifficultySettings {\n  name: string;\n  enemySpawnRate: number;\n  enemySpeed: number;\n  enemyHealth: number;\n  bossSpawnRate: number;\n  bossHealth: number;\n  powerUpSpawnRate: number;\n  playerHealth: number;\n  playerSpeed: number;\n  scoreMultiplier: number;\n}\n\nexport class DifficultySystem {\n  private currentDifficulty: 'easy' | 'medium' | 'hard' = 'medium';\n  private difficultySettings: { [key: string]: DifficultySettings } = {\n    easy: {\n      name: 'Easy',\n      enemySpawnRate: 2000, // 2 seconds\n      enemySpeed: 1.5,\n      enemyHealth: 1,\n      bossSpawnRate: 60000, // 1 minute\n      bossHealth: 50,\n      powerUpSpawnRate: 8000, // 8 seconds\n      playerHealth: 100,\n      playerSpeed: 5,\n      scoreMultiplier: 1.0\n    },\n    medium: {\n      name: 'Medium',\n      enemySpawnRate: 1000, // 1 second\n      enemySpeed: 2.0,\n      enemyHealth: 1,\n      bossSpawnRate: 30000, // 30 seconds\n      bossHealth: 100,\n      powerUpSpawnRate: 5000, // 5 seconds\n      playerHealth: 50,\n      playerSpeed: 4,\n      scoreMultiplier: 1.5\n    },\n    hard: {\n      name: 'Hard',\n      enemySpawnRate: 500, // 0.5 seconds\n      enemySpeed: 3.0,\n      enemyHealth: 2,\n      bossSpawnRate: 20000, // 20 seconds\n      bossHealth: 200,\n      powerUpSpawnRate: 3000, // 3 seconds\n      playerHealth: 25,\n      playerSpeed: 3,\n      scoreMultiplier: 2.0\n    }\n  };\n\n  getCurrentDifficulty(): 'easy' | 'medium' | 'hard' {\n    return this.currentDifficulty;\n  }\n\n  setDifficulty(difficulty: 'easy' | 'medium' | 'hard'): void {\n    this.currentDifficulty = difficulty;\n  }\n\n  getDifficultySettings(): DifficultySettings {\n    return this.difficultySettings[this.currentDifficulty];\n  }\n\n  getDifficultySettingsFor(difficulty: 'easy' | 'medium' | 'hard'): DifficultySettings {\n    return this.difficultySettings[difficulty];\n  }\n\n  getAllDifficulties(): DifficultySettings[] {\n    return Object.values(this.difficultySettings);\n  }\n\n  getDifficultyName(): string {\n    return this.difficultySettings[this.currentDifficulty].name;\n  }\n\n  getEnemySpawnRate(): number {\n    return this.difficultySettings[this.currentDifficulty].enemySpawnRate;\n  }\n\n  getEnemySpeed(): number {\n    return this.difficultySettings[this.currentDifficulty].enemySpeed;\n  }\n\n  getEnemyHealth(): number {\n    return this.difficultySettings[this.currentDifficulty].enemyHealth;\n  }\n\n  getBossSpawnRate(): number {\n    return this.difficultySettings[this.currentDifficulty].bossSpawnRate;\n  }\n\n  getBossHealth(): number {\n    return this.difficultySettings[this.currentDifficulty].bossHealth;\n  }\n\n  getPowerUpSpawnRate(): number {\n    return this.difficultySettings[this.currentDifficulty].powerUpSpawnRate;\n  }\n\n  getPlayerHealth(): number {\n    return this.difficultySettings[this.currentDifficulty].playerHealth;\n  }\n\n  getPlayerSpeed(): number {\n    return this.difficultySettings[this.currentDifficulty].playerSpeed;\n  }\n\n  getScoreMultiplier(): number {\n    return this.difficultySettings[this.currentDifficulty].scoreMultiplier;\n  }\n\n  // Dynamic difficulty adjustment based on player performance\n  adjustDifficultyBasedOnPerformance(score: number, lives: number, gameTime: number): void {\n    const performanceScore = (score / 1000) + (lives * 100) + (gameTime / 1000);\n    \n    if (performanceScore > 1000 && this.currentDifficulty === 'easy') {\n      this.currentDifficulty = 'medium';\n    } else if (performanceScore > 2000 && this.currentDifficulty === 'medium') {\n      this.currentDifficulty = 'hard';\n    } else if (performanceScore < 500 && this.currentDifficulty === 'hard') {\n      this.currentDifficulty = 'medium';\n    } else if (performanceScore < 200 && this.currentDifficulty === 'medium') {\n      this.currentDifficulty = 'easy';\n    }\n  }\n\n  // Progressive difficulty increase\n  increaseDifficulty(score: number): void {\n    const scoreThresholds = {\n      easy: 10000,\n      medium: 50000,\n      hard: 100000\n    };\n\n    if (score >= scoreThresholds[this.currentDifficulty]) {\n      switch (this.currentDifficulty) {\n        case 'easy':\n          this.currentDifficulty = 'medium';\n          break;\n        case 'medium':\n          this.currentDifficulty = 'hard';\n          break;\n        case 'hard':\n          // Already at maximum difficulty\n          break;\n      }\n    }\n  }\n\n  // Get difficulty description\n  getDifficultyDescription(): string {\n    switch (this.currentDifficulty) {\n      case 'easy':\n        return 'Relaxed gameplay with slower enemies and more health';\n      case 'medium':\n        return 'Balanced challenge with moderate enemy speed and health';\n      case 'hard':\n        return 'Intense gameplay with fast enemies and limited health';\n      default:\n        return 'Unknown difficulty';\n    }\n  }\n\n  // Get difficulty color for UI\n  getDifficultyColor(): string {\n    switch (this.currentDifficulty) {\n      case 'easy':\n        return '#00ff00';\n      case 'medium':\n        return '#ffaa00';\n      case 'hard':\n        return '#ff0000';\n      default:\n        return '#ffffff';\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}