{"ast":null,"code":"export class EnhancedAchievementSystem {\n  // 3 seconds\n\n  constructor() {\n    this.achievements = [];\n    this.unlockedAchievements = [];\n    this.showAchievement = null;\n    this.achievementDisplayTime = 0;\n    this.achievementDisplayDuration = 3000;\n    this.initializeAchievements();\n  }\n  initializeAchievements() {\n    this.achievements = [{\n      id: 'first_kill',\n      name: 'First Blood',\n      description: 'Destroy your first enemy',\n      icon: '🎯',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 1\n    }, {\n      id: 'combo_master',\n      name: 'Combo Master',\n      description: 'Achieve a 10-kill combo',\n      icon: '🔥',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 10\n    }, {\n      id: 'streak_warrior',\n      name: 'Streak Warrior',\n      description: 'Get a 20-kill streak',\n      icon: '⚔️',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 20\n    }, {\n      id: 'boss_slayer',\n      name: 'Boss Slayer',\n      description: 'Defeat 5 bosses',\n      icon: '👹',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 5\n    }, {\n      id: 'power_up_collector',\n      name: 'Power-Up Collector',\n      description: 'Collect 50 power-ups',\n      icon: '💎',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 50\n    }, {\n      id: 'score_hunter',\n      name: 'Score Hunter',\n      description: 'Reach 100,000 points',\n      icon: '🏆',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 100000\n    }, {\n      id: 'survivor',\n      name: 'Survivor',\n      description: 'Survive for 5 minutes',\n      icon: '⏰',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 300000 // 5 minutes in milliseconds\n    }, {\n      id: 'wing_commander',\n      name: 'Wing Commander',\n      description: 'Get 2 wing fighters',\n      icon: '✈️',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 2\n    }, {\n      id: 'shield_master',\n      name: 'Shield Master',\n      description: 'Use shield for 30 seconds',\n      icon: '🛡️',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 30000 // 30 seconds in milliseconds\n    }, {\n      id: 'rapid_fire',\n      name: 'Rapid Fire',\n      description: 'Use rapid fire 10 times',\n      icon: '⚡',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 10\n    }, {\n      id: 'double_trouble',\n      name: 'Double Trouble',\n      description: 'Use double shot 5 times',\n      icon: '🔫',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 5\n    }, {\n      id: 'speed_demon',\n      name: 'Speed Demon',\n      description: 'Use speed boost 15 times',\n      icon: '🚀',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 15\n    }, {\n      id: 'perfect_game',\n      name: 'Perfect Game',\n      description: 'Complete a game without dying',\n      icon: '💯',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 1\n    }, {\n      id: 'high_scorer',\n      name: 'High Scorer',\n      description: 'Reach 500,000 points',\n      icon: '🌟',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 500000\n    }, {\n      id: 'legend',\n      name: 'Legend',\n      description: 'Reach 1,000,000 points',\n      icon: '👑',\n      unlocked: false,\n      progress: 0,\n      maxProgress: 1000000\n    }];\n  }\n  updateAchievements(gameStats) {\n    let newAchievement = null;\n    this.achievements.forEach(achievement => {\n      if (!achievement.unlocked) {\n        let progress = 0;\n        let shouldUnlock = false;\n        switch (achievement.id) {\n          case 'first_kill':\n            progress = gameStats.enemiesDestroyed > 0 ? 1 : 0;\n            shouldUnlock = gameStats.enemiesDestroyed >= 1;\n            break;\n          case 'combo_master':\n            progress = Math.min(gameStats.maxCombo, achievement.maxProgress);\n            shouldUnlock = gameStats.maxCombo >= 10;\n            break;\n          case 'streak_warrior':\n            progress = Math.min(gameStats.maxKillStreak, achievement.maxProgress);\n            shouldUnlock = gameStats.maxKillStreak >= 20;\n            break;\n          case 'boss_slayer':\n            progress = Math.min(gameStats.bossesDefeated, achievement.maxProgress);\n            shouldUnlock = gameStats.bossesDefeated >= 5;\n            break;\n          case 'power_up_collector':\n            progress = Math.min(gameStats.powerUpsCollected, achievement.maxProgress);\n            shouldUnlock = gameStats.powerUpsCollected >= 50;\n            break;\n          case 'score_hunter':\n            progress = Math.min(gameStats.score, achievement.maxProgress);\n            shouldUnlock = gameStats.score >= 100000;\n            break;\n          case 'survivor':\n            progress = Math.min(gameStats.gameTime, achievement.maxProgress);\n            shouldUnlock = gameStats.gameTime >= 300000;\n            break;\n          case 'wing_commander':\n            progress = gameStats.wingFighters || 0;\n            shouldUnlock = (gameStats.wingFighters || 0) >= 2;\n            break;\n          case 'shield_master':\n            progress = Math.min(gameStats.shieldTime || 0, achievement.maxProgress);\n            shouldUnlock = (gameStats.shieldTime || 0) >= 30000;\n            break;\n          case 'rapid_fire':\n            progress = Math.min(gameStats.rapidFireUses || 0, achievement.maxProgress);\n            shouldUnlock = (gameStats.rapidFireUses || 0) >= 10;\n            break;\n          case 'double_trouble':\n            progress = Math.min(gameStats.doubleShotUses || 0, achievement.maxProgress);\n            shouldUnlock = (gameStats.doubleShotUses || 0) >= 5;\n            break;\n          case 'speed_demon':\n            progress = Math.min(gameStats.speedBoostUses || 0, achievement.maxProgress);\n            shouldUnlock = (gameStats.speedBoostUses || 0) >= 15;\n            break;\n          case 'perfect_game':\n            progress = gameStats.lives > 0 ? 1 : 0;\n            shouldUnlock = gameStats.lives > 0 && gameStats.gameTime > 60000; // 1 minute minimum\n            break;\n          case 'high_scorer':\n            progress = Math.min(gameStats.score, achievement.maxProgress);\n            shouldUnlock = gameStats.score >= 500000;\n            break;\n          case 'legend':\n            progress = Math.min(gameStats.score, achievement.maxProgress);\n            shouldUnlock = gameStats.score >= 1000000;\n            break;\n        }\n        achievement.progress = progress;\n        if (shouldUnlock && !achievement.unlocked) {\n          achievement.unlocked = true;\n          achievement.unlockedAt = new Date();\n          this.unlockedAchievements.push(achievement);\n          newAchievement = achievement;\n        }\n      }\n    });\n    return newAchievement;\n  }\n  displayAchievement(achievement) {\n    this.showAchievement = achievement;\n    this.achievementDisplayTime = Date.now();\n  }\n  updateAchievementDisplay() {\n    if (this.showAchievement && Date.now() - this.achievementDisplayTime > this.achievementDisplayDuration) {\n      this.showAchievement = null;\n    }\n  }\n  getAchievements() {\n    return this.achievements;\n  }\n  getUnlockedAchievements() {\n    return this.unlockedAchievements;\n  }\n  getCurrentDisplayAchievement() {\n    return this.showAchievement;\n  }\n  getAchievementProgress(achievementId) {\n    const achievement = this.achievements.find(a => a.id === achievementId);\n    return achievement ? achievement.progress : 0;\n  }\n  isAchievementUnlocked(achievementId) {\n    const achievement = this.achievements.find(a => a.id === achievementId);\n    return achievement ? achievement.unlocked : false;\n  }\n  drawAchievementNotification(ctx, canvas) {\n    if (this.showAchievement) {\n      const achievement = this.showAchievement;\n      const timeRemaining = this.achievementDisplayDuration - (Date.now() - this.achievementDisplayTime);\n      const alpha = Math.min(1, timeRemaining / 1000);\n      ctx.save();\n      ctx.globalAlpha = alpha;\n\n      // Achievement background\n      const bgWidth = 300;\n      const bgHeight = 80;\n      const bgX = canvas.width - bgWidth - 20;\n      const bgY = 20;\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(bgX, bgY, bgWidth, bgHeight);\n      ctx.strokeStyle = '#ffaa00';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(bgX, bgY, bgWidth, bgHeight);\n\n      // Achievement icon\n      ctx.font = '30px Arial';\n      ctx.fillStyle = '#ffaa00';\n      ctx.textAlign = 'center';\n      ctx.fillText(achievement.icon, bgX + 40, bgY + 50);\n\n      // Achievement text\n      ctx.font = 'bold 16px Arial';\n      ctx.fillStyle = '#ffffff';\n      ctx.textAlign = 'left';\n      ctx.fillText(achievement.name, bgX + 70, bgY + 30);\n      ctx.font = '12px Arial';\n      ctx.fillStyle = '#cccccc';\n      ctx.fillText(achievement.description, bgX + 70, bgY + 50);\n      ctx.restore();\n    }\n  }\n}","map":{"version":3,"names":["EnhancedAchievementSystem","constructor","achievements","unlockedAchievements","showAchievement","achievementDisplayTime","achievementDisplayDuration","initializeAchievements","id","name","description","icon","unlocked","progress","maxProgress","updateAchievements","gameStats","newAchievement","forEach","achievement","shouldUnlock","enemiesDestroyed","Math","min","maxCombo","maxKillStreak","bossesDefeated","powerUpsCollected","score","gameTime","wingFighters","shieldTime","rapidFireUses","doubleShotUses","speedBoostUses","lives","unlockedAt","Date","push","displayAchievement","now","updateAchievementDisplay","getAchievements","getUnlockedAchievements","getCurrentDisplayAchievement","getAchievementProgress","achievementId","find","a","isAchievementUnlocked","drawAchievementNotification","ctx","canvas","timeRemaining","alpha","save","globalAlpha","bgWidth","bgHeight","bgX","width","bgY","fillStyle","fillRect","strokeStyle","lineWidth","strokeRect","font","textAlign","fillText","restore"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/EnhancedAchievementSystem.ts"],"sourcesContent":["import { Achievement, GameStats } from '../types/GameTypes';\n\nexport class EnhancedAchievementSystem {\n  private achievements: Achievement[] = [];\n  private unlockedAchievements: Achievement[] = [];\n  private showAchievement: Achievement | null = null;\n  private achievementDisplayTime: number = 0;\n  private achievementDisplayDuration: number = 3000; // 3 seconds\n\n  constructor() {\n    this.initializeAchievements();\n  }\n\n  private initializeAchievements(): void {\n    this.achievements = [\n      {\n        id: 'first_kill',\n        name: 'First Blood',\n        description: 'Destroy your first enemy',\n        icon: '🎯',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 1\n      },\n      {\n        id: 'combo_master',\n        name: 'Combo Master',\n        description: 'Achieve a 10-kill combo',\n        icon: '🔥',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 10\n      },\n      {\n        id: 'streak_warrior',\n        name: 'Streak Warrior',\n        description: 'Get a 20-kill streak',\n        icon: '⚔️',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 20\n      },\n      {\n        id: 'boss_slayer',\n        name: 'Boss Slayer',\n        description: 'Defeat 5 bosses',\n        icon: '👹',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 5\n      },\n      {\n        id: 'power_up_collector',\n        name: 'Power-Up Collector',\n        description: 'Collect 50 power-ups',\n        icon: '💎',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 50\n      },\n      {\n        id: 'score_hunter',\n        name: 'Score Hunter',\n        description: 'Reach 100,000 points',\n        icon: '🏆',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 100000\n      },\n      {\n        id: 'survivor',\n        name: 'Survivor',\n        description: 'Survive for 5 minutes',\n        icon: '⏰',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 300000 // 5 minutes in milliseconds\n      },\n      {\n        id: 'wing_commander',\n        name: 'Wing Commander',\n        description: 'Get 2 wing fighters',\n        icon: '✈️',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 2\n      },\n      {\n        id: 'shield_master',\n        name: 'Shield Master',\n        description: 'Use shield for 30 seconds',\n        icon: '🛡️',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 30000 // 30 seconds in milliseconds\n      },\n      {\n        id: 'rapid_fire',\n        name: 'Rapid Fire',\n        description: 'Use rapid fire 10 times',\n        icon: '⚡',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 10\n      },\n      {\n        id: 'double_trouble',\n        name: 'Double Trouble',\n        description: 'Use double shot 5 times',\n        icon: '🔫',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 5\n      },\n      {\n        id: 'speed_demon',\n        name: 'Speed Demon',\n        description: 'Use speed boost 15 times',\n        icon: '🚀',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 15\n      },\n      {\n        id: 'perfect_game',\n        name: 'Perfect Game',\n        description: 'Complete a game without dying',\n        icon: '💯',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 1\n      },\n      {\n        id: 'high_scorer',\n        name: 'High Scorer',\n        description: 'Reach 500,000 points',\n        icon: '🌟',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 500000\n      },\n      {\n        id: 'legend',\n        name: 'Legend',\n        description: 'Reach 1,000,000 points',\n        icon: '👑',\n        unlocked: false,\n        progress: 0,\n        maxProgress: 1000000\n      }\n    ];\n  }\n\n  updateAchievements(gameStats: GameStats): Achievement | null {\n    let newAchievement: Achievement | null = null;\n\n    this.achievements.forEach(achievement => {\n      if (!achievement.unlocked) {\n        let progress = 0;\n        let shouldUnlock = false;\n\n        switch (achievement.id) {\n          case 'first_kill':\n            progress = gameStats.enemiesDestroyed > 0 ? 1 : 0;\n            shouldUnlock = gameStats.enemiesDestroyed >= 1;\n            break;\n\n          case 'combo_master':\n            progress = Math.min(gameStats.maxCombo, achievement.maxProgress);\n            shouldUnlock = gameStats.maxCombo >= 10;\n            break;\n\n          case 'streak_warrior':\n            progress = Math.min(gameStats.maxKillStreak, achievement.maxProgress);\n            shouldUnlock = gameStats.maxKillStreak >= 20;\n            break;\n\n          case 'boss_slayer':\n            progress = Math.min(gameStats.bossesDefeated, achievement.maxProgress);\n            shouldUnlock = gameStats.bossesDefeated >= 5;\n            break;\n\n          case 'power_up_collector':\n            progress = Math.min(gameStats.powerUpsCollected, achievement.maxProgress);\n            shouldUnlock = gameStats.powerUpsCollected >= 50;\n            break;\n\n          case 'score_hunter':\n            progress = Math.min(gameStats.score, achievement.maxProgress);\n            shouldUnlock = gameStats.score >= 100000;\n            break;\n\n          case 'survivor':\n            progress = Math.min(gameStats.gameTime, achievement.maxProgress);\n            shouldUnlock = gameStats.gameTime >= 300000;\n            break;\n\n          case 'wing_commander':\n            progress = gameStats.wingFighters || 0;\n            shouldUnlock = (gameStats.wingFighters || 0) >= 2;\n            break;\n\n          case 'shield_master':\n            progress = Math.min(gameStats.shieldTime || 0, achievement.maxProgress);\n            shouldUnlock = (gameStats.shieldTime || 0) >= 30000;\n            break;\n\n          case 'rapid_fire':\n            progress = Math.min(gameStats.rapidFireUses || 0, achievement.maxProgress);\n            shouldUnlock = (gameStats.rapidFireUses || 0) >= 10;\n            break;\n\n          case 'double_trouble':\n            progress = Math.min(gameStats.doubleShotUses || 0, achievement.maxProgress);\n            shouldUnlock = (gameStats.doubleShotUses || 0) >= 5;\n            break;\n\n          case 'speed_demon':\n            progress = Math.min(gameStats.speedBoostUses || 0, achievement.maxProgress);\n            shouldUnlock = (gameStats.speedBoostUses || 0) >= 15;\n            break;\n\n          case 'perfect_game':\n            progress = gameStats.lives > 0 ? 1 : 0;\n            shouldUnlock = gameStats.lives > 0 && gameStats.gameTime > 60000; // 1 minute minimum\n            break;\n\n          case 'high_scorer':\n            progress = Math.min(gameStats.score, achievement.maxProgress);\n            shouldUnlock = gameStats.score >= 500000;\n            break;\n\n          case 'legend':\n            progress = Math.min(gameStats.score, achievement.maxProgress);\n            shouldUnlock = gameStats.score >= 1000000;\n            break;\n        }\n\n        achievement.progress = progress;\n\n        if (shouldUnlock && !achievement.unlocked) {\n          achievement.unlocked = true;\n          achievement.unlockedAt = new Date();\n          this.unlockedAchievements.push(achievement);\n          newAchievement = achievement;\n        }\n      }\n    });\n\n    return newAchievement;\n  }\n\n  displayAchievement(achievement: Achievement): void {\n    this.showAchievement = achievement;\n    this.achievementDisplayTime = Date.now();\n  }\n\n  updateAchievementDisplay(): void {\n    if (this.showAchievement && Date.now() - this.achievementDisplayTime > this.achievementDisplayDuration) {\n      this.showAchievement = null;\n    }\n  }\n\n  getAchievements(): Achievement[] {\n    return this.achievements;\n  }\n\n  getUnlockedAchievements(): Achievement[] {\n    return this.unlockedAchievements;\n  }\n\n  getCurrentDisplayAchievement(): Achievement | null {\n    return this.showAchievement;\n  }\n\n  getAchievementProgress(achievementId: string): number {\n    const achievement = this.achievements.find(a => a.id === achievementId);\n    return achievement ? achievement.progress : 0;\n  }\n\n  isAchievementUnlocked(achievementId: string): boolean {\n    const achievement = this.achievements.find(a => a.id === achievementId);\n    return achievement ? achievement.unlocked : false;\n  }\n\n  drawAchievementNotification(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement): void {\n    if (this.showAchievement) {\n      const achievement = this.showAchievement;\n      const timeRemaining = this.achievementDisplayDuration - (Date.now() - this.achievementDisplayTime);\n      const alpha = Math.min(1, timeRemaining / 1000);\n\n      ctx.save();\n      ctx.globalAlpha = alpha;\n\n      // Achievement background\n      const bgWidth = 300;\n      const bgHeight = 80;\n      const bgX = canvas.width - bgWidth - 20;\n      const bgY = 20;\n\n      ctx.fillStyle = '#000000';\n      ctx.fillRect(bgX, bgY, bgWidth, bgHeight);\n\n      ctx.strokeStyle = '#ffaa00';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(bgX, bgY, bgWidth, bgHeight);\n\n      // Achievement icon\n      ctx.font = '30px Arial';\n      ctx.fillStyle = '#ffaa00';\n      ctx.textAlign = 'center';\n      ctx.fillText(achievement.icon, bgX + 40, bgY + 50);\n\n      // Achievement text\n      ctx.font = 'bold 16px Arial';\n      ctx.fillStyle = '#ffffff';\n      ctx.textAlign = 'left';\n      ctx.fillText(achievement.name, bgX + 70, bgY + 30);\n\n      ctx.font = '12px Arial';\n      ctx.fillStyle = '#cccccc';\n      ctx.fillText(achievement.description, bgX + 70, bgY + 50);\n\n      ctx.restore();\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}