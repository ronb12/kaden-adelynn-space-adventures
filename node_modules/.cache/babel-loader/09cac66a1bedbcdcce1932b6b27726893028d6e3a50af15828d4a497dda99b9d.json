{"ast":null,"code":"export class WingFighterSystem {\n  constructor() {\n    this.wingFighters = [];\n  }\n  updateWingFighters(player, canvas) {\n    this.wingFighters = player.wingFighters;\n    this.wingFighters.forEach((wingFighter, index) => {\n      // Update wing fighter positions relative to player\n      wingFighter.targetX = player.x + wingFighter.offset;\n      wingFighter.targetY = player.y;\n\n      // Smooth movement towards target position\n      const dx = wingFighter.targetX - wingFighter.x;\n      const dy = wingFighter.targetY - wingFighter.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      if (distance > 5) {\n        wingFighter.x += dx / distance * wingFighter.speed;\n        wingFighter.y += dy / distance * wingFighter.speed;\n      }\n\n      // Keep wing fighters within screen bounds\n      wingFighter.x = Math.max(0, Math.min(canvas.width - wingFighter.width, wingFighter.x));\n      wingFighter.y = Math.max(0, Math.min(canvas.height - wingFighter.height, wingFighter.y));\n    });\n  }\n  shootWingFighters(player) {\n    const bullets = [];\n    this.wingFighters.forEach(wingFighter => {\n      bullets.push({\n        x: wingFighter.x + wingFighter.width / 2 - 2,\n        y: wingFighter.y,\n        width: 4,\n        height: 8,\n        speed: 6,\n        type: 'wing_laser',\n        color: '#00aaff',\n        damage: 1,\n        owner: 'player'\n      });\n    });\n    return bullets;\n  }\n  drawWingFighters(ctx) {\n    this.wingFighters.forEach(wingFighter => {\n      // Draw wing fighter (identical to player ship)\n      ctx.fillStyle = '#00aaff';\n      ctx.fillRect(wingFighter.x, wingFighter.y, wingFighter.width, wingFighter.height);\n\n      // Draw wing fighter details\n      ctx.fillStyle = '#ffffff';\n      ctx.fillRect(wingFighter.x + 5, wingFighter.y + 5, wingFighter.width - 10, wingFighter.height - 10);\n\n      // Draw wing fighter glow effect\n      ctx.shadowColor = '#00aaff';\n      ctx.shadowBlur = 10;\n      ctx.fillStyle = '#00aaff';\n      ctx.fillRect(wingFighter.x, wingFighter.y, wingFighter.width, wingFighter.height);\n      ctx.shadowBlur = 0;\n    });\n  }\n  removeWingFighter(wingFighterId, player) {\n    player.wingFighters = player.wingFighters.filter(wf => wf.id !== wingFighterId);\n  }\n  getWingFighters() {\n    return this.wingFighters;\n  }\n}","map":{"version":3,"names":["WingFighterSystem","constructor","wingFighters","updateWingFighters","player","canvas","forEach","wingFighter","index","targetX","x","offset","targetY","y","dx","dy","distance","Math","sqrt","speed","max","min","width","height","shootWingFighters","bullets","push","type","color","damage","owner","drawWingFighters","ctx","fillStyle","fillRect","shadowColor","shadowBlur","removeWingFighter","wingFighterId","filter","wf","id","getWingFighters"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/WingFighterSystem.ts"],"sourcesContent":["import { WingFighter, Player, Bullet } from '../types/GameTypes';\n\nexport class WingFighterSystem {\n  private wingFighters: WingFighter[] = [];\n\n  updateWingFighters(player: Player, canvas: HTMLCanvasElement): void {\n    this.wingFighters = player.wingFighters;\n    \n    this.wingFighters.forEach((wingFighter, index) => {\n      // Update wing fighter positions relative to player\n      wingFighter.targetX = player.x + wingFighter.offset;\n      wingFighter.targetY = player.y;\n      \n      // Smooth movement towards target position\n      const dx = wingFighter.targetX - wingFighter.x;\n      const dy = wingFighter.targetY - wingFighter.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n      \n      if (distance > 5) {\n        wingFighter.x += (dx / distance) * wingFighter.speed;\n        wingFighter.y += (dy / distance) * wingFighter.speed;\n      }\n      \n      // Keep wing fighters within screen bounds\n      wingFighter.x = Math.max(0, Math.min(canvas.width - wingFighter.width, wingFighter.x));\n      wingFighter.y = Math.max(0, Math.min(canvas.height - wingFighter.height, wingFighter.y));\n    });\n  }\n\n  shootWingFighters(player: Player): Bullet[] {\n    const bullets: Bullet[] = [];\n    \n    this.wingFighters.forEach(wingFighter => {\n      bullets.push({\n        x: wingFighter.x + wingFighter.width / 2 - 2,\n        y: wingFighter.y,\n        width: 4,\n        height: 8,\n        speed: 6,\n        type: 'wing_laser',\n        color: '#00aaff',\n        damage: 1,\n        owner: 'player'\n      });\n    });\n    \n    return bullets;\n  }\n\n  drawWingFighters(ctx: CanvasRenderingContext2D): void {\n    this.wingFighters.forEach(wingFighter => {\n      // Draw wing fighter (identical to player ship)\n      ctx.fillStyle = '#00aaff';\n      ctx.fillRect(wingFighter.x, wingFighter.y, wingFighter.width, wingFighter.height);\n      \n      // Draw wing fighter details\n      ctx.fillStyle = '#ffffff';\n      ctx.fillRect(wingFighter.x + 5, wingFighter.y + 5, wingFighter.width - 10, wingFighter.height - 10);\n      \n      // Draw wing fighter glow effect\n      ctx.shadowColor = '#00aaff';\n      ctx.shadowBlur = 10;\n      ctx.fillStyle = '#00aaff';\n      ctx.fillRect(wingFighter.x, wingFighter.y, wingFighter.width, wingFighter.height);\n      ctx.shadowBlur = 0;\n    });\n  }\n\n  removeWingFighter(wingFighterId: string, player: Player): void {\n    player.wingFighters = player.wingFighters.filter(wf => wf.id !== wingFighterId);\n  }\n\n  getWingFighters(): WingFighter[] {\n    return this.wingFighters;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}