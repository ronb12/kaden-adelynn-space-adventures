{"ast":null,"code":"export class AudioSystem {\n  constructor() {\n    this.audioContext = null;\n    this.sounds = {};\n    this.musicEnabled = true;\n    this.soundEnabled = true;\n    this.currentMusic = null;\n    this.initializeAudio();\n  }\n  async initializeAudio() {\n    try {\n      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      await this.loadSounds();\n    } catch (error) {\n      console.warn('Audio not supported:', error);\n    }\n  }\n  async loadSounds() {\n    if (!this.audioContext) return;\n\n    // Generate sound effects programmatically\n    this.sounds['shoot'] = this.generateTone(800, 0.1, 'square');\n    this.sounds['enemy_hit'] = this.generateTone(200, 0.2, 'sawtooth');\n    this.sounds['enemy_destroy'] = this.generateTone(150, 0.3, 'triangle');\n    this.sounds['power_up'] = this.generateTone(600, 0.5, 'sine');\n    this.sounds['boss_hit'] = this.generateTone(100, 0.4, 'square');\n    this.sounds['boss_destroy'] = this.generateTone(80, 0.6, 'sawtooth');\n    this.sounds['achievement'] = this.generateTone(1000, 0.8, 'sine');\n    this.sounds['combo'] = this.generateTone(1200, 0.3, 'square');\n    this.sounds['streak'] = this.generateTone(1400, 0.4, 'triangle');\n  }\n  generateTone(frequency, duration, waveType) {\n    if (!this.audioContext) throw new Error('Audio context not initialized');\n    const sampleRate = this.audioContext.sampleRate;\n    const buffer = this.audioContext.createBuffer(1, sampleRate * duration, sampleRate);\n    const data = buffer.getChannelData(0);\n    for (let i = 0; i < data.length; i++) {\n      const time = i / sampleRate;\n      let value = 0;\n      switch (waveType) {\n        case 'sine':\n          value = Math.sin(2 * Math.PI * frequency * time);\n          break;\n        case 'square':\n          value = Math.sin(2 * Math.PI * frequency * time) > 0 ? 1 : -1;\n          break;\n        case 'sawtooth':\n          value = 2 * (time * frequency - Math.floor(time * frequency + 0.5));\n          break;\n        case 'triangle':\n          value = 2 * Math.abs(2 * (time * frequency - Math.floor(time * frequency + 0.5))) - 1;\n          break;\n      }\n\n      // Apply envelope (fade out)\n      const envelope = Math.exp(-time * 3);\n      data[i] = value * envelope * 0.3;\n    }\n    return buffer;\n  }\n  playSound(soundName, volume = 1) {\n    if (!this.audioContext || !this.soundEnabled || !this.sounds[soundName]) return;\n    try {\n      const source = this.audioContext.createBufferSource();\n      const gainNode = this.audioContext.createGain();\n      source.buffer = this.sounds[soundName];\n      gainNode.gain.value = volume;\n      source.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      source.start();\n    } catch (error) {\n      console.warn('Error playing sound:', error);\n    }\n  }\n  playMusic(musicName, loop = true) {\n    if (!this.audioContext || !this.musicEnabled || !this.sounds[musicName]) return;\n    this.stopMusic();\n    try {\n      this.currentMusic = this.audioContext.createBufferSource();\n      const gainNode = this.audioContext.createGain();\n      this.currentMusic.buffer = this.sounds[musicName];\n      this.currentMusic.loop = loop;\n      gainNode.gain.value = 0.5; // Lower volume for music\n\n      this.currentMusic.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n      this.currentMusic.start();\n    } catch (error) {\n      console.warn('Error playing music:', error);\n    }\n  }\n  stopMusic() {\n    if (this.currentMusic) {\n      try {\n        this.currentMusic.stop();\n      } catch (error) {\n        // Ignore errors when stopping music\n      }\n      this.currentMusic = null;\n    }\n  }\n  setMusicEnabled(enabled) {\n    this.musicEnabled = enabled;\n    if (!enabled) {\n      this.stopMusic();\n    }\n  }\n  setSoundEnabled(enabled) {\n    this.soundEnabled = enabled;\n  }\n  isMusicEnabled() {\n    return this.musicEnabled;\n  }\n  isSoundEnabled() {\n    return this.soundEnabled;\n  }\n\n  // Sound effect methods for game events\n  playShootSound() {\n    this.playSound('shoot', 0.5);\n  }\n  playEnemyHitSound() {\n    this.playSound('enemy_hit', 0.6);\n  }\n  playEnemyDestroySound() {\n    this.playSound('enemy_destroy', 0.7);\n  }\n  playPowerUpSound() {\n    this.playSound('power_up', 0.8);\n  }\n  playBossHitSound() {\n    this.playSound('boss_hit', 0.9);\n  }\n  playBossDestroySound() {\n    this.playSound('boss_destroy', 1.0);\n  }\n  playAchievementSound() {\n    this.playSound('achievement', 0.9);\n  }\n  playComboSound() {\n    this.playSound('combo', 0.7);\n  }\n  playStreakSound() {\n    this.playSound('streak', 0.8);\n  }\n}","map":{"version":3,"names":["AudioSystem","constructor","audioContext","sounds","musicEnabled","soundEnabled","currentMusic","initializeAudio","window","AudioContext","webkitAudioContext","loadSounds","error","console","warn","generateTone","frequency","duration","waveType","Error","sampleRate","buffer","createBuffer","data","getChannelData","i","length","time","value","Math","sin","PI","floor","abs","envelope","exp","playSound","soundName","volume","source","createBufferSource","gainNode","createGain","gain","connect","destination","start","playMusic","musicName","loop","stopMusic","stop","setMusicEnabled","enabled","setSoundEnabled","isMusicEnabled","isSoundEnabled","playShootSound","playEnemyHitSound","playEnemyDestroySound","playPowerUpSound","playBossHitSound","playBossDestroySound","playAchievementSound","playComboSound","playStreakSound"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/AudioSystem.ts"],"sourcesContent":["export class AudioSystem {\n  private audioContext: AudioContext | null = null;\n  private sounds: { [key: string]: AudioBuffer } = {};\n  private musicEnabled: boolean = true;\n  private soundEnabled: boolean = true;\n  private currentMusic: AudioBufferSourceNode | null = null;\n\n  constructor() {\n    this.initializeAudio();\n  }\n\n  private async initializeAudio(): Promise<void> {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      await this.loadSounds();\n    } catch (error) {\n      console.warn('Audio not supported:', error);\n    }\n  }\n\n  private async loadSounds(): Promise<void> {\n    if (!this.audioContext) return;\n\n    // Generate sound effects programmatically\n    this.sounds['shoot'] = this.generateTone(800, 0.1, 'square');\n    this.sounds['enemy_hit'] = this.generateTone(200, 0.2, 'sawtooth');\n    this.sounds['enemy_destroy'] = this.generateTone(150, 0.3, 'triangle');\n    this.sounds['power_up'] = this.generateTone(600, 0.5, 'sine');\n    this.sounds['boss_hit'] = this.generateTone(100, 0.4, 'square');\n    this.sounds['boss_destroy'] = this.generateTone(80, 0.6, 'sawtooth');\n    this.sounds['achievement'] = this.generateTone(1000, 0.8, 'sine');\n    this.sounds['combo'] = this.generateTone(1200, 0.3, 'square');\n    this.sounds['streak'] = this.generateTone(1400, 0.4, 'triangle');\n  }\n\n  private generateTone(frequency: number, duration: number, waveType: OscillatorType): AudioBuffer {\n    if (!this.audioContext) throw new Error('Audio context not initialized');\n\n    const sampleRate = this.audioContext.sampleRate;\n    const buffer = this.audioContext.createBuffer(1, sampleRate * duration, sampleRate);\n    const data = buffer.getChannelData(0);\n\n    for (let i = 0; i < data.length; i++) {\n      const time = i / sampleRate;\n      let value = 0;\n\n      switch (waveType) {\n        case 'sine':\n          value = Math.sin(2 * Math.PI * frequency * time);\n          break;\n        case 'square':\n          value = Math.sin(2 * Math.PI * frequency * time) > 0 ? 1 : -1;\n          break;\n        case 'sawtooth':\n          value = 2 * (time * frequency - Math.floor(time * frequency + 0.5));\n          break;\n        case 'triangle':\n          value = 2 * Math.abs(2 * (time * frequency - Math.floor(time * frequency + 0.5))) - 1;\n          break;\n      }\n\n      // Apply envelope (fade out)\n      const envelope = Math.exp(-time * 3);\n      data[i] = value * envelope * 0.3;\n    }\n\n    return buffer;\n  }\n\n  playSound(soundName: string, volume: number = 1): void {\n    if (!this.audioContext || !this.soundEnabled || !this.sounds[soundName]) return;\n\n    try {\n      const source = this.audioContext.createBufferSource();\n      const gainNode = this.audioContext.createGain();\n\n      source.buffer = this.sounds[soundName];\n      gainNode.gain.value = volume;\n\n      source.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n\n      source.start();\n    } catch (error) {\n      console.warn('Error playing sound:', error);\n    }\n  }\n\n  playMusic(musicName: string, loop: boolean = true): void {\n    if (!this.audioContext || !this.musicEnabled || !this.sounds[musicName]) return;\n\n    this.stopMusic();\n\n    try {\n      this.currentMusic = this.audioContext.createBufferSource();\n      const gainNode = this.audioContext.createGain();\n\n      this.currentMusic.buffer = this.sounds[musicName];\n      this.currentMusic.loop = loop;\n      gainNode.gain.value = 0.5; // Lower volume for music\n\n      this.currentMusic.connect(gainNode);\n      gainNode.connect(this.audioContext.destination);\n\n      this.currentMusic.start();\n    } catch (error) {\n      console.warn('Error playing music:', error);\n    }\n  }\n\n  stopMusic(): void {\n    if (this.currentMusic) {\n      try {\n        this.currentMusic.stop();\n      } catch (error) {\n        // Ignore errors when stopping music\n      }\n      this.currentMusic = null;\n    }\n  }\n\n  setMusicEnabled(enabled: boolean): void {\n    this.musicEnabled = enabled;\n    if (!enabled) {\n      this.stopMusic();\n    }\n  }\n\n  setSoundEnabled(enabled: boolean): void {\n    this.soundEnabled = enabled;\n  }\n\n  isMusicEnabled(): boolean {\n    return this.musicEnabled;\n  }\n\n  isSoundEnabled(): boolean {\n    return this.soundEnabled;\n  }\n\n  // Sound effect methods for game events\n  playShootSound(): void {\n    this.playSound('shoot', 0.5);\n  }\n\n  playEnemyHitSound(): void {\n    this.playSound('enemy_hit', 0.6);\n  }\n\n  playEnemyDestroySound(): void {\n    this.playSound('enemy_destroy', 0.7);\n  }\n\n  playPowerUpSound(): void {\n    this.playSound('power_up', 0.8);\n  }\n\n  playBossHitSound(): void {\n    this.playSound('boss_hit', 0.9);\n  }\n\n  playBossDestroySound(): void {\n    this.playSound('boss_destroy', 1.0);\n  }\n\n  playAchievementSound(): void {\n    this.playSound('achievement', 0.9);\n  }\n\n  playComboSound(): void {\n    this.playSound('combo', 0.7);\n  }\n\n  playStreakSound(): void {\n    this.playSound('streak', 0.8);\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,CAAC;EAOvBC,WAAWA,CAAA,EAAG;IAAA,KANNC,YAAY,GAAwB,IAAI;IAAA,KACxCC,MAAM,GAAmC,CAAC,CAAC;IAAA,KAC3CC,YAAY,GAAY,IAAI;IAAA,KAC5BC,YAAY,GAAY,IAAI;IAAA,KAC5BC,YAAY,GAAiC,IAAI;IAGvD,IAAI,CAACC,eAAe,CAAC,CAAC;EACxB;EAEA,MAAcA,eAAeA,CAAA,EAAkB;IAC7C,IAAI;MACF,IAAI,CAACL,YAAY,GAAG,KAAKM,MAAM,CAACC,YAAY,IAAKD,MAAM,CAASE,kBAAkB,EAAE,CAAC;MACrF,MAAM,IAAI,CAACC,UAAU,CAAC,CAAC;IACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,sBAAsB,EAAEF,KAAK,CAAC;IAC7C;EACF;EAEA,MAAcD,UAAUA,CAAA,EAAkB;IACxC,IAAI,CAAC,IAAI,CAACT,YAAY,EAAE;;IAExB;IACA,IAAI,CAACC,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,CAACY,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,CAAC;IAC5D,IAAI,CAACZ,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAACY,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,UAAU,CAAC;IAClE,IAAI,CAACZ,MAAM,CAAC,eAAe,CAAC,GAAG,IAAI,CAACY,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,UAAU,CAAC;IACtE,IAAI,CAACZ,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAACY,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC;IAC7D,IAAI,CAACZ,MAAM,CAAC,UAAU,CAAC,GAAG,IAAI,CAACY,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,CAAC;IAC/D,IAAI,CAACZ,MAAM,CAAC,cAAc,CAAC,GAAG,IAAI,CAACY,YAAY,CAAC,EAAE,EAAE,GAAG,EAAE,UAAU,CAAC;IACpE,IAAI,CAACZ,MAAM,CAAC,aAAa,CAAC,GAAG,IAAI,CAACY,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,CAAC;IACjE,IAAI,CAACZ,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,CAACY,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,CAAC;IAC7D,IAAI,CAACZ,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAACY,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,CAAC;EAClE;EAEQA,YAAYA,CAACC,SAAiB,EAAEC,QAAgB,EAAEC,QAAwB,EAAe;IAC/F,IAAI,CAAC,IAAI,CAAChB,YAAY,EAAE,MAAM,IAAIiB,KAAK,CAAC,+BAA+B,CAAC;IAExE,MAAMC,UAAU,GAAG,IAAI,CAAClB,YAAY,CAACkB,UAAU;IAC/C,MAAMC,MAAM,GAAG,IAAI,CAACnB,YAAY,CAACoB,YAAY,CAAC,CAAC,EAAEF,UAAU,GAAGH,QAAQ,EAAEG,UAAU,CAAC;IACnF,MAAMG,IAAI,GAAGF,MAAM,CAACG,cAAc,CAAC,CAAC,CAAC;IAErC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACpC,MAAME,IAAI,GAAGF,CAAC,GAAGL,UAAU;MAC3B,IAAIQ,KAAK,GAAG,CAAC;MAEb,QAAQV,QAAQ;QACd,KAAK,MAAM;UACTU,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAGf,SAAS,GAAGW,IAAI,CAAC;UAChD;QACF,KAAK,QAAQ;UACXC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGD,IAAI,CAACE,EAAE,GAAGf,SAAS,GAAGW,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAC7D;QACF,KAAK,UAAU;UACbC,KAAK,GAAG,CAAC,IAAID,IAAI,GAAGX,SAAS,GAAGa,IAAI,CAACG,KAAK,CAACL,IAAI,GAAGX,SAAS,GAAG,GAAG,CAAC,CAAC;UACnE;QACF,KAAK,UAAU;UACbY,KAAK,GAAG,CAAC,GAAGC,IAAI,CAACI,GAAG,CAAC,CAAC,IAAIN,IAAI,GAAGX,SAAS,GAAGa,IAAI,CAACG,KAAK,CAACL,IAAI,GAAGX,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;UACrF;MACJ;;MAEA;MACA,MAAMkB,QAAQ,GAAGL,IAAI,CAACM,GAAG,CAAC,CAACR,IAAI,GAAG,CAAC,CAAC;MACpCJ,IAAI,CAACE,CAAC,CAAC,GAAGG,KAAK,GAAGM,QAAQ,GAAG,GAAG;IAClC;IAEA,OAAOb,MAAM;EACf;EAEAe,SAASA,CAACC,SAAiB,EAAEC,MAAc,GAAG,CAAC,EAAQ;IACrD,IAAI,CAAC,IAAI,CAACpC,YAAY,IAAI,CAAC,IAAI,CAACG,YAAY,IAAI,CAAC,IAAI,CAACF,MAAM,CAACkC,SAAS,CAAC,EAAE;IAEzE,IAAI;MACF,MAAME,MAAM,GAAG,IAAI,CAACrC,YAAY,CAACsC,kBAAkB,CAAC,CAAC;MACrD,MAAMC,QAAQ,GAAG,IAAI,CAACvC,YAAY,CAACwC,UAAU,CAAC,CAAC;MAE/CH,MAAM,CAAClB,MAAM,GAAG,IAAI,CAAClB,MAAM,CAACkC,SAAS,CAAC;MACtCI,QAAQ,CAACE,IAAI,CAACf,KAAK,GAAGU,MAAM;MAE5BC,MAAM,CAACK,OAAO,CAACH,QAAQ,CAAC;MACxBA,QAAQ,CAACG,OAAO,CAAC,IAAI,CAAC1C,YAAY,CAAC2C,WAAW,CAAC;MAE/CN,MAAM,CAACO,KAAK,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOlC,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,sBAAsB,EAAEF,KAAK,CAAC;IAC7C;EACF;EAEAmC,SAASA,CAACC,SAAiB,EAAEC,IAAa,GAAG,IAAI,EAAQ;IACvD,IAAI,CAAC,IAAI,CAAC/C,YAAY,IAAI,CAAC,IAAI,CAACE,YAAY,IAAI,CAAC,IAAI,CAACD,MAAM,CAAC6C,SAAS,CAAC,EAAE;IAEzE,IAAI,CAACE,SAAS,CAAC,CAAC;IAEhB,IAAI;MACF,IAAI,CAAC5C,YAAY,GAAG,IAAI,CAACJ,YAAY,CAACsC,kBAAkB,CAAC,CAAC;MAC1D,MAAMC,QAAQ,GAAG,IAAI,CAACvC,YAAY,CAACwC,UAAU,CAAC,CAAC;MAE/C,IAAI,CAACpC,YAAY,CAACe,MAAM,GAAG,IAAI,CAAClB,MAAM,CAAC6C,SAAS,CAAC;MACjD,IAAI,CAAC1C,YAAY,CAAC2C,IAAI,GAAGA,IAAI;MAC7BR,QAAQ,CAACE,IAAI,CAACf,KAAK,GAAG,GAAG,CAAC,CAAC;;MAE3B,IAAI,CAACtB,YAAY,CAACsC,OAAO,CAACH,QAAQ,CAAC;MACnCA,QAAQ,CAACG,OAAO,CAAC,IAAI,CAAC1C,YAAY,CAAC2C,WAAW,CAAC;MAE/C,IAAI,CAACvC,YAAY,CAACwC,KAAK,CAAC,CAAC;IAC3B,CAAC,CAAC,OAAOlC,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAAC,sBAAsB,EAAEF,KAAK,CAAC;IAC7C;EACF;EAEAsC,SAASA,CAAA,EAAS;IAChB,IAAI,IAAI,CAAC5C,YAAY,EAAE;MACrB,IAAI;QACF,IAAI,CAACA,YAAY,CAAC6C,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,OAAOvC,KAAK,EAAE;QACd;MAAA;MAEF,IAAI,CAACN,YAAY,GAAG,IAAI;IAC1B;EACF;EAEA8C,eAAeA,CAACC,OAAgB,EAAQ;IACtC,IAAI,CAACjD,YAAY,GAAGiD,OAAO;IAC3B,IAAI,CAACA,OAAO,EAAE;MACZ,IAAI,CAACH,SAAS,CAAC,CAAC;IAClB;EACF;EAEAI,eAAeA,CAACD,OAAgB,EAAQ;IACtC,IAAI,CAAChD,YAAY,GAAGgD,OAAO;EAC7B;EAEAE,cAAcA,CAAA,EAAY;IACxB,OAAO,IAAI,CAACnD,YAAY;EAC1B;EAEAoD,cAAcA,CAAA,EAAY;IACxB,OAAO,IAAI,CAACnD,YAAY;EAC1B;;EAEA;EACAoD,cAAcA,CAAA,EAAS;IACrB,IAAI,CAACrB,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC;EAC9B;EAEAsB,iBAAiBA,CAAA,EAAS;IACxB,IAAI,CAACtB,SAAS,CAAC,WAAW,EAAE,GAAG,CAAC;EAClC;EAEAuB,qBAAqBA,CAAA,EAAS;IAC5B,IAAI,CAACvB,SAAS,CAAC,eAAe,EAAE,GAAG,CAAC;EACtC;EAEAwB,gBAAgBA,CAAA,EAAS;IACvB,IAAI,CAACxB,SAAS,CAAC,UAAU,EAAE,GAAG,CAAC;EACjC;EAEAyB,gBAAgBA,CAAA,EAAS;IACvB,IAAI,CAACzB,SAAS,CAAC,UAAU,EAAE,GAAG,CAAC;EACjC;EAEA0B,oBAAoBA,CAAA,EAAS;IAC3B,IAAI,CAAC1B,SAAS,CAAC,cAAc,EAAE,GAAG,CAAC;EACrC;EAEA2B,oBAAoBA,CAAA,EAAS;IAC3B,IAAI,CAAC3B,SAAS,CAAC,aAAa,EAAE,GAAG,CAAC;EACpC;EAEA4B,cAAcA,CAAA,EAAS;IACrB,IAAI,CAAC5B,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC;EAC9B;EAEA6B,eAAeA,CAAA,EAAS;IACtB,IAAI,CAAC7B,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC;EAC/B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}