{"ast":null,"code":"export class ShieldSystem {\n  constructor() {\n    this.shieldActive = false;\n    this.shieldTime = 0;\n    this.shieldEnergy = 100;\n    this.maxShieldEnergy = 100;\n  }\n  activateShield(player, duration = 5000) {\n    player.hasShield = true;\n    player.shieldTime = duration;\n    this.shieldActive = true;\n    this.shieldTime = duration;\n    this.shieldEnergy = this.maxShieldEnergy;\n  }\n  updateShield(player, deltaTime) {\n    if (player.hasShield && player.shieldTime > 0) {\n      player.shieldTime -= deltaTime;\n      this.shieldTime -= deltaTime;\n\n      // Shield energy decreases over time\n      this.shieldEnergy -= deltaTime / 1000 * 10; // 10 energy per second\n\n      if (player.shieldTime <= 0 || this.shieldEnergy <= 0) {\n        this.deactivateShield(player);\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n  deactivateShield(player) {\n    player.hasShield = false;\n    player.shieldTime = 0;\n    this.shieldActive = false;\n    this.shieldTime = 0;\n    this.shieldEnergy = 0;\n  }\n  takeDamage(player, damage) {\n    if (player.hasShield && this.shieldEnergy > 0) {\n      this.shieldEnergy -= damage * 10; // Shield absorbs damage\n\n      if (this.shieldEnergy <= 0) {\n        this.deactivateShield(player);\n        return false; // Shield broken, no damage to player\n      }\n      return true; // Shield absorbed damage\n    }\n    return false; // No shield, damage goes to player\n  }\n  drawShield(ctx, player) {\n    if (player.hasShield && this.shieldEnergy > 0) {\n      const shieldRadius = 30 + this.shieldEnergy / this.maxShieldEnergy * 10;\n      const shieldAlpha = this.shieldEnergy / this.maxShieldEnergy * 0.3;\n      ctx.save();\n      ctx.globalAlpha = shieldAlpha;\n      ctx.strokeStyle = '#00ffff';\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.arc(player.x + player.width / 2, player.y + player.height / 2, shieldRadius, 0, Math.PI * 2);\n      ctx.stroke();\n\n      // Shield energy bar\n      const barWidth = 60;\n      const barHeight = 8;\n      const barX = player.x + player.width / 2 - barWidth / 2;\n      const barY = player.y - 20;\n\n      // Background\n      ctx.fillStyle = '#333333';\n      ctx.fillRect(barX, barY, barWidth, barHeight);\n\n      // Energy fill\n      const energyWidth = this.shieldEnergy / this.maxShieldEnergy * barWidth;\n      ctx.fillStyle = '#00ffff';\n      ctx.fillRect(barX, barY, energyWidth, barHeight);\n      ctx.restore();\n    }\n  }\n  getShieldEnergy() {\n    return this.shieldEnergy;\n  }\n  getMaxShieldEnergy() {\n    return this.maxShieldEnergy;\n  }\n  isShieldActive() {\n    return this.shieldActive;\n  }\n  rechargeShield(amount) {\n    if (this.shieldActive) {\n      this.shieldEnergy = Math.min(this.maxShieldEnergy, this.shieldEnergy + amount);\n    }\n  }\n}","map":{"version":3,"names":["ShieldSystem","constructor","shieldActive","shieldTime","shieldEnergy","maxShieldEnergy","activateShield","player","duration","hasShield","updateShield","deltaTime","deactivateShield","takeDamage","damage","drawShield","ctx","shieldRadius","shieldAlpha","save","globalAlpha","strokeStyle","lineWidth","beginPath","arc","x","width","y","height","Math","PI","stroke","barWidth","barHeight","barX","barY","fillStyle","fillRect","energyWidth","restore","getShieldEnergy","getMaxShieldEnergy","isShieldActive","rechargeShield","amount","min"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/ShieldSystem.ts"],"sourcesContent":["import { Player } from '../types/GameTypes';\n\nexport class ShieldSystem {\n  private shieldActive: boolean = false;\n  private shieldTime: number = 0;\n  private shieldEnergy: number = 100;\n  private maxShieldEnergy: number = 100;\n\n  activateShield(player: Player, duration: number = 5000): void {\n    player.hasShield = true;\n    player.shieldTime = duration;\n    this.shieldActive = true;\n    this.shieldTime = duration;\n    this.shieldEnergy = this.maxShieldEnergy;\n  }\n\n  updateShield(player: Player, deltaTime: number): boolean {\n    if (player.hasShield && player.shieldTime > 0) {\n      player.shieldTime -= deltaTime;\n      this.shieldTime -= deltaTime;\n      \n      // Shield energy decreases over time\n      this.shieldEnergy -= (deltaTime / 1000) * 10; // 10 energy per second\n      \n      if (player.shieldTime <= 0 || this.shieldEnergy <= 0) {\n        this.deactivateShield(player);\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n\n  deactivateShield(player: Player): void {\n    player.hasShield = false;\n    player.shieldTime = 0;\n    this.shieldActive = false;\n    this.shieldTime = 0;\n    this.shieldEnergy = 0;\n  }\n\n  takeDamage(player: Player, damage: number): boolean {\n    if (player.hasShield && this.shieldEnergy > 0) {\n      this.shieldEnergy -= damage * 10; // Shield absorbs damage\n      \n      if (this.shieldEnergy <= 0) {\n        this.deactivateShield(player);\n        return false; // Shield broken, no damage to player\n      }\n      return true; // Shield absorbed damage\n    }\n    return false; // No shield, damage goes to player\n  }\n\n  drawShield(ctx: CanvasRenderingContext2D, player: Player): void {\n    if (player.hasShield && this.shieldEnergy > 0) {\n      const shieldRadius = 30 + (this.shieldEnergy / this.maxShieldEnergy) * 10;\n      const shieldAlpha = (this.shieldEnergy / this.maxShieldEnergy) * 0.3;\n      \n      ctx.save();\n      ctx.globalAlpha = shieldAlpha;\n      ctx.strokeStyle = '#00ffff';\n      ctx.lineWidth = 3;\n      ctx.beginPath();\n      ctx.arc(\n        player.x + player.width / 2,\n        player.y + player.height / 2,\n        shieldRadius,\n        0,\n        Math.PI * 2\n      );\n      ctx.stroke();\n      \n      // Shield energy bar\n      const barWidth = 60;\n      const barHeight = 8;\n      const barX = player.x + player.width / 2 - barWidth / 2;\n      const barY = player.y - 20;\n      \n      // Background\n      ctx.fillStyle = '#333333';\n      ctx.fillRect(barX, barY, barWidth, barHeight);\n      \n      // Energy fill\n      const energyWidth = (this.shieldEnergy / this.maxShieldEnergy) * barWidth;\n      ctx.fillStyle = '#00ffff';\n      ctx.fillRect(barX, barY, energyWidth, barHeight);\n      \n      ctx.restore();\n    }\n  }\n\n  getShieldEnergy(): number {\n    return this.shieldEnergy;\n  }\n\n  getMaxShieldEnergy(): number {\n    return this.maxShieldEnergy;\n  }\n\n  isShieldActive(): boolean {\n    return this.shieldActive;\n  }\n\n  rechargeShield(amount: number): void {\n    if (this.shieldActive) {\n      this.shieldEnergy = Math.min(this.maxShieldEnergy, this.shieldEnergy + amount);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}