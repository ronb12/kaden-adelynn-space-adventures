{"ast":null,"code":"export class EnhancedBossSystem {\n  constructor() {\n    this.bosses = [];\n    this.bossSpawnTimer = 0;\n    this.bossSpawnInterval = 30000;\n    // 30 seconds\n    this.currentBossPhase = 1;\n    this.maxBossPhases = 3;\n  }\n  spawnBoss(canvas, score) {\n    const currentTime = Date.now();\n\n    // Spawn boss every 30 seconds or when score reaches certain thresholds\n    if (currentTime - this.bossSpawnTimer > this.bossSpawnInterval || score > 0 && score % 10000 === 0) {\n      const bossTypes = [{\n        type: 'destroyer',\n        color: '#ff0000',\n        width: 80,\n        height: 60,\n        health: 100,\n        speed: 2,\n        attackPattern: 'spiral'\n      }, {\n        type: 'battleship',\n        color: '#6600ff',\n        width: 100,\n        height: 80,\n        health: 150,\n        speed: 1,\n        attackPattern: 'wave'\n      }, {\n        type: 'mothership',\n        color: '#ff6600',\n        width: 120,\n        height: 100,\n        health: 200,\n        speed: 1,\n        attackPattern: 'burst'\n      }];\n      const bossType = bossTypes[Math.floor(Math.random() * bossTypes.length)];\n      const boss = {\n        id: `boss_${Date.now()}`,\n        x: canvas.width / 2 - bossType.width / 2,\n        y: -bossType.height,\n        width: bossType.width,\n        height: bossType.height,\n        health: bossType.health * this.currentBossPhase,\n        maxHealth: bossType.health * this.currentBossPhase,\n        speed: bossType.speed,\n        type: bossType.type,\n        color: bossType.color,\n        attackPattern: bossType.attackPattern,\n        lastAttack: 0,\n        attackCooldown: 1000,\n        phase: this.currentBossPhase,\n        maxPhase: this.maxBossPhases\n      };\n      this.bosses.push(boss);\n      this.bossSpawnTimer = currentTime;\n      return boss;\n    }\n    return null;\n  }\n  updateBosses(canvas, player) {\n    const bullets = [];\n    const currentTime = Date.now();\n    this.bosses.forEach((boss, index) => {\n      // Update boss position\n      if (boss.y < 100) {\n        boss.y += boss.speed;\n      }\n\n      // Boss movement patterns\n      switch (boss.attackPattern) {\n        case 'spiral':\n          boss.x += Math.sin(currentTime / 500) * 2;\n          break;\n        case 'wave':\n          boss.x += Math.cos(currentTime / 300) * 1.5;\n          break;\n        case 'burst':\n          if (currentTime % 2000 < 100) {\n            boss.x += (Math.random() - 0.5) * 4;\n          }\n          break;\n      }\n\n      // Keep boss within screen bounds\n      boss.x = Math.max(0, Math.min(canvas.width - boss.width, boss.x));\n\n      // Boss attacks\n      if (currentTime - boss.lastAttack > boss.attackCooldown) {\n        const bossBullets = this.generateBossBullets(boss, player);\n        bullets.push(...bossBullets);\n        boss.lastAttack = currentTime;\n      }\n\n      // Remove boss if destroyed or off-screen\n      if (boss.health <= 0 || boss.y > canvas.height + boss.height) {\n        this.bosses.splice(index, 1);\n\n        // Increase boss phase for next spawn\n        if (boss.health <= 0) {\n          this.currentBossPhase = Math.min(this.maxBossPhases, this.currentBossPhase + 1);\n        }\n      }\n    });\n    return bullets;\n  }\n  generateBossBullets(boss, player) {\n    const bullets = [];\n    const currentTime = Date.now();\n    switch (boss.attackPattern) {\n      case 'spiral':\n        // Spiral bullet pattern\n        for (let i = 0; i < 8; i++) {\n          const angle = currentTime / 100 + i * Math.PI / 4;\n          bullets.push({\n            x: boss.x + boss.width / 2,\n            y: boss.y + boss.height,\n            width: 6,\n            height: 6,\n            speed: 3,\n            type: 'boss_spiral',\n            color: '#ff0000',\n            damage: 1,\n            owner: 'boss'\n          });\n        }\n        break;\n      case 'wave':\n        // Wave bullet pattern\n        for (let i = 0; i < 5; i++) {\n          bullets.push({\n            x: boss.x + i * boss.width / 4,\n            y: boss.y + boss.height,\n            width: 8,\n            height: 8,\n            speed: 4,\n            type: 'boss_wave',\n            color: '#6600ff',\n            damage: 1,\n            owner: 'boss'\n          });\n        }\n        break;\n      case 'burst':\n        // Burst bullet pattern\n        const angle = Math.atan2(player.y - boss.y, player.x - boss.x);\n        for (let i = -2; i <= 2; i++) {\n          bullets.push({\n            x: boss.x + boss.width / 2,\n            y: boss.y + boss.height / 2,\n            width: 10,\n            height: 10,\n            speed: 5,\n            type: 'boss_burst',\n            color: '#ff6600',\n            damage: 2,\n            owner: 'boss'\n          });\n        }\n        break;\n    }\n    return bullets;\n  }\n  drawBosses(ctx) {\n    this.bosses.forEach(boss => {\n      // Draw boss body\n      ctx.fillStyle = boss.color;\n      ctx.fillRect(boss.x, boss.y, boss.width, boss.height);\n\n      // Draw boss details\n      ctx.fillStyle = '#ffffff';\n      ctx.fillRect(boss.x + 5, boss.y + 5, boss.width - 10, boss.height - 10);\n\n      // Draw boss glow effect\n      ctx.shadowColor = boss.color;\n      ctx.shadowBlur = 15;\n      ctx.fillStyle = boss.color;\n      ctx.fillRect(boss.x, boss.y, boss.width, boss.height);\n      ctx.shadowBlur = 0;\n\n      // Draw boss health bar\n      const barWidth = boss.width;\n      const barHeight = 8;\n      const barX = boss.x;\n      const barY = boss.y - 15;\n\n      // Background\n      ctx.fillStyle = '#333333';\n      ctx.fillRect(barX, barY, barWidth, barHeight);\n\n      // Health fill\n      const healthPercent = boss.health / boss.maxHealth;\n      ctx.fillStyle = '#ff0000';\n      ctx.fillRect(barX, barY, barWidth * healthPercent, barHeight);\n\n      // Health text\n      ctx.fillStyle = '#ffffff';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`${boss.health}/${boss.maxHealth}`, boss.x + boss.width / 2, barY - 5);\n      ctx.textAlign = 'left';\n    });\n  }\n  getBosses() {\n    return this.bosses;\n  }\n  removeBoss(bossId) {\n    this.bosses = this.bosses.filter(boss => boss.id !== bossId);\n  }\n  getCurrentBossPhase() {\n    return this.currentBossPhase;\n  }\n  setBossPhase(phase) {\n    this.currentBossPhase = Math.max(1, Math.min(this.maxBossPhases, phase));\n  }\n}","map":{"version":3,"names":["EnhancedBossSystem","constructor","bosses","bossSpawnTimer","bossSpawnInterval","currentBossPhase","maxBossPhases","spawnBoss","canvas","score","currentTime","Date","now","bossTypes","type","color","width","height","health","speed","attackPattern","bossType","Math","floor","random","length","boss","id","x","y","maxHealth","lastAttack","attackCooldown","phase","maxPhase","push","updateBosses","player","bullets","forEach","index","sin","cos","max","min","bossBullets","generateBossBullets","splice","i","angle","PI","damage","owner","atan2","drawBosses","ctx","fillStyle","fillRect","shadowColor","shadowBlur","barWidth","barHeight","barX","barY","healthPercent","font","textAlign","fillText","getBosses","removeBoss","bossId","filter","getCurrentBossPhase","setBossPhase"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/EnhancedBossSystem.ts"],"sourcesContent":["import { Boss, Bullet } from '../types/GameTypes';\n\nexport class EnhancedBossSystem {\n  private bosses: Boss[] = [];\n  private bossSpawnTimer: number = 0;\n  private bossSpawnInterval: number = 30000; // 30 seconds\n  private currentBossPhase: number = 1;\n  private maxBossPhases: number = 3;\n\n  spawnBoss(canvas: HTMLCanvasElement, score: number): Boss | null {\n    const currentTime = Date.now();\n    \n    // Spawn boss every 30 seconds or when score reaches certain thresholds\n    if (currentTime - this.bossSpawnTimer > this.bossSpawnInterval || \n        (score > 0 && score % 10000 === 0)) {\n      \n      const bossTypes = [\n        {\n          type: 'destroyer',\n          color: '#ff0000',\n          width: 80,\n          height: 60,\n          health: 100,\n          speed: 2,\n          attackPattern: 'spiral'\n        },\n        {\n          type: 'battleship',\n          color: '#6600ff',\n          width: 100,\n          height: 80,\n          health: 150,\n          speed: 1,\n          attackPattern: 'wave'\n        },\n        {\n          type: 'mothership',\n          color: '#ff6600',\n          width: 120,\n          height: 100,\n          health: 200,\n          speed: 1,\n          attackPattern: 'burst'\n        }\n      ];\n      \n      const bossType = bossTypes[Math.floor(Math.random() * bossTypes.length)];\n      \n      const boss: Boss = {\n        id: `boss_${Date.now()}`,\n        x: canvas.width / 2 - bossType.width / 2,\n        y: -bossType.height,\n        width: bossType.width,\n        height: bossType.height,\n        health: bossType.health * this.currentBossPhase,\n        maxHealth: bossType.health * this.currentBossPhase,\n        speed: bossType.speed,\n        type: bossType.type,\n        color: bossType.color,\n        attackPattern: bossType.attackPattern,\n        lastAttack: 0,\n        attackCooldown: 1000,\n        phase: this.currentBossPhase,\n        maxPhase: this.maxBossPhases\n      };\n\n      this.bosses.push(boss);\n      this.bossSpawnTimer = currentTime;\n      \n      return boss;\n    }\n    \n    return null;\n  }\n\n  updateBosses(canvas: HTMLCanvasElement, player: any): Bullet[] {\n    const bullets: Bullet[] = [];\n    const currentTime = Date.now();\n    \n    this.bosses.forEach((boss, index) => {\n      // Update boss position\n      if (boss.y < 100) {\n        boss.y += boss.speed;\n      }\n      \n      // Boss movement patterns\n      switch (boss.attackPattern) {\n        case 'spiral':\n          boss.x += Math.sin(currentTime / 500) * 2;\n          break;\n        case 'wave':\n          boss.x += Math.cos(currentTime / 300) * 1.5;\n          break;\n        case 'burst':\n          if (currentTime % 2000 < 100) {\n            boss.x += (Math.random() - 0.5) * 4;\n          }\n          break;\n      }\n      \n      // Keep boss within screen bounds\n      boss.x = Math.max(0, Math.min(canvas.width - boss.width, boss.x));\n      \n      // Boss attacks\n      if (currentTime - boss.lastAttack > boss.attackCooldown) {\n        const bossBullets = this.generateBossBullets(boss, player);\n        bullets.push(...bossBullets);\n        boss.lastAttack = currentTime;\n      }\n      \n      // Remove boss if destroyed or off-screen\n      if (boss.health <= 0 || boss.y > canvas.height + boss.height) {\n        this.bosses.splice(index, 1);\n        \n        // Increase boss phase for next spawn\n        if (boss.health <= 0) {\n          this.currentBossPhase = Math.min(this.maxBossPhases, this.currentBossPhase + 1);\n        }\n      }\n    });\n    \n    return bullets;\n  }\n\n  private generateBossBullets(boss: Boss, player: any): Bullet[] {\n    const bullets: Bullet[] = [];\n    const currentTime = Date.now();\n    \n    switch (boss.attackPattern) {\n      case 'spiral':\n        // Spiral bullet pattern\n        for (let i = 0; i < 8; i++) {\n          const angle = (currentTime / 100) + (i * Math.PI / 4);\n          bullets.push({\n            x: boss.x + boss.width / 2,\n            y: boss.y + boss.height,\n            width: 6,\n            height: 6,\n            speed: 3,\n            type: 'boss_spiral',\n            color: '#ff0000',\n            damage: 1,\n            owner: 'boss'\n          });\n        }\n        break;\n        \n      case 'wave':\n        // Wave bullet pattern\n        for (let i = 0; i < 5; i++) {\n          bullets.push({\n            x: boss.x + (i * boss.width / 4),\n            y: boss.y + boss.height,\n            width: 8,\n            height: 8,\n            speed: 4,\n            type: 'boss_wave',\n            color: '#6600ff',\n            damage: 1,\n            owner: 'boss'\n          });\n        }\n        break;\n        \n      case 'burst':\n        // Burst bullet pattern\n        const angle = Math.atan2(player.y - boss.y, player.x - boss.x);\n        for (let i = -2; i <= 2; i++) {\n          bullets.push({\n            x: boss.x + boss.width / 2,\n            y: boss.y + boss.height / 2,\n            width: 10,\n            height: 10,\n            speed: 5,\n            type: 'boss_burst',\n            color: '#ff6600',\n            damage: 2,\n            owner: 'boss'\n          });\n        }\n        break;\n    }\n    \n    return bullets;\n  }\n\n  drawBosses(ctx: CanvasRenderingContext2D): void {\n    this.bosses.forEach(boss => {\n      // Draw boss body\n      ctx.fillStyle = boss.color;\n      ctx.fillRect(boss.x, boss.y, boss.width, boss.height);\n      \n      // Draw boss details\n      ctx.fillStyle = '#ffffff';\n      ctx.fillRect(boss.x + 5, boss.y + 5, boss.width - 10, boss.height - 10);\n      \n      // Draw boss glow effect\n      ctx.shadowColor = boss.color;\n      ctx.shadowBlur = 15;\n      ctx.fillStyle = boss.color;\n      ctx.fillRect(boss.x, boss.y, boss.width, boss.height);\n      ctx.shadowBlur = 0;\n      \n      // Draw boss health bar\n      const barWidth = boss.width;\n      const barHeight = 8;\n      const barX = boss.x;\n      const barY = boss.y - 15;\n      \n      // Background\n      ctx.fillStyle = '#333333';\n      ctx.fillRect(barX, barY, barWidth, barHeight);\n      \n      // Health fill\n      const healthPercent = boss.health / boss.maxHealth;\n      ctx.fillStyle = '#ff0000';\n      ctx.fillRect(barX, barY, barWidth * healthPercent, barHeight);\n      \n      // Health text\n      ctx.fillStyle = '#ffffff';\n      ctx.font = '12px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(\n        `${boss.health}/${boss.maxHealth}`,\n        boss.x + boss.width / 2,\n        barY - 5\n      );\n      \n      ctx.textAlign = 'left';\n    });\n  }\n\n  getBosses(): Boss[] {\n    return this.bosses;\n  }\n\n  removeBoss(bossId: string): void {\n    this.bosses = this.bosses.filter(boss => boss.id !== bossId);\n  }\n\n  getCurrentBossPhase(): number {\n    return this.currentBossPhase;\n  }\n\n  setBossPhase(phase: number): void {\n    this.currentBossPhase = Math.max(1, Math.min(this.maxBossPhases, phase));\n  }\n}\n"],"mappings":"AAEA,OAAO,MAAMA,kBAAkB,CAAC;EAAAC,YAAA;IAAA,KACtBC,MAAM,GAAW,EAAE;IAAA,KACnBC,cAAc,GAAW,CAAC;IAAA,KAC1BC,iBAAiB,GAAW,KAAK;IAAE;IAAA,KACnCC,gBAAgB,GAAW,CAAC;IAAA,KAC5BC,aAAa,GAAW,CAAC;EAAA;EAEjCC,SAASA,CAACC,MAAyB,EAAEC,KAAa,EAAe;IAC/D,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;;IAE9B;IACA,IAAIF,WAAW,GAAG,IAAI,CAACP,cAAc,GAAG,IAAI,CAACC,iBAAiB,IACzDK,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,KAAK,KAAK,CAAE,EAAE;MAEtC,MAAMI,SAAS,GAAG,CAChB;QACEC,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAE,SAAS;QAChBC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE,CAAC;QACRC,aAAa,EAAE;MACjB,CAAC,EACD;QACEN,IAAI,EAAE,YAAY;QAClBC,KAAK,EAAE,SAAS;QAChBC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE,EAAE;QACVC,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE,CAAC;QACRC,aAAa,EAAE;MACjB,CAAC,EACD;QACEN,IAAI,EAAE,YAAY;QAClBC,KAAK,EAAE,SAAS;QAChBC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE,GAAG;QACXC,MAAM,EAAE,GAAG;QACXC,KAAK,EAAE,CAAC;QACRC,aAAa,EAAE;MACjB,CAAC,CACF;MAED,MAAMC,QAAQ,GAAGR,SAAS,CAACS,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGX,SAAS,CAACY,MAAM,CAAC,CAAC;MAExE,MAAMC,IAAU,GAAG;QACjBC,EAAE,EAAE,QAAQhB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QACxBgB,CAAC,EAAEpB,MAAM,CAACQ,KAAK,GAAG,CAAC,GAAGK,QAAQ,CAACL,KAAK,GAAG,CAAC;QACxCa,CAAC,EAAE,CAACR,QAAQ,CAACJ,MAAM;QACnBD,KAAK,EAAEK,QAAQ,CAACL,KAAK;QACrBC,MAAM,EAAEI,QAAQ,CAACJ,MAAM;QACvBC,MAAM,EAAEG,QAAQ,CAACH,MAAM,GAAG,IAAI,CAACb,gBAAgB;QAC/CyB,SAAS,EAAET,QAAQ,CAACH,MAAM,GAAG,IAAI,CAACb,gBAAgB;QAClDc,KAAK,EAAEE,QAAQ,CAACF,KAAK;QACrBL,IAAI,EAAEO,QAAQ,CAACP,IAAI;QACnBC,KAAK,EAAEM,QAAQ,CAACN,KAAK;QACrBK,aAAa,EAAEC,QAAQ,CAACD,aAAa;QACrCW,UAAU,EAAE,CAAC;QACbC,cAAc,EAAE,IAAI;QACpBC,KAAK,EAAE,IAAI,CAAC5B,gBAAgB;QAC5B6B,QAAQ,EAAE,IAAI,CAAC5B;MACjB,CAAC;MAED,IAAI,CAACJ,MAAM,CAACiC,IAAI,CAACT,IAAI,CAAC;MACtB,IAAI,CAACvB,cAAc,GAAGO,WAAW;MAEjC,OAAOgB,IAAI;IACb;IAEA,OAAO,IAAI;EACb;EAEAU,YAAYA,CAAC5B,MAAyB,EAAE6B,MAAW,EAAY;IAC7D,MAAMC,OAAiB,GAAG,EAAE;IAC5B,MAAM5B,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAE9B,IAAI,CAACV,MAAM,CAACqC,OAAO,CAAC,CAACb,IAAI,EAAEc,KAAK,KAAK;MACnC;MACA,IAAId,IAAI,CAACG,CAAC,GAAG,GAAG,EAAE;QAChBH,IAAI,CAACG,CAAC,IAAIH,IAAI,CAACP,KAAK;MACtB;;MAEA;MACA,QAAQO,IAAI,CAACN,aAAa;QACxB,KAAK,QAAQ;UACXM,IAAI,CAACE,CAAC,IAAIN,IAAI,CAACmB,GAAG,CAAC/B,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC;UACzC;QACF,KAAK,MAAM;UACTgB,IAAI,CAACE,CAAC,IAAIN,IAAI,CAACoB,GAAG,CAAChC,WAAW,GAAG,GAAG,CAAC,GAAG,GAAG;UAC3C;QACF,KAAK,OAAO;UACV,IAAIA,WAAW,GAAG,IAAI,GAAG,GAAG,EAAE;YAC5BgB,IAAI,CAACE,CAAC,IAAI,CAACN,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;UACrC;UACA;MACJ;;MAEA;MACAE,IAAI,CAACE,CAAC,GAAGN,IAAI,CAACqB,GAAG,CAAC,CAAC,EAAErB,IAAI,CAACsB,GAAG,CAACpC,MAAM,CAACQ,KAAK,GAAGU,IAAI,CAACV,KAAK,EAAEU,IAAI,CAACE,CAAC,CAAC,CAAC;;MAEjE;MACA,IAAIlB,WAAW,GAAGgB,IAAI,CAACK,UAAU,GAAGL,IAAI,CAACM,cAAc,EAAE;QACvD,MAAMa,WAAW,GAAG,IAAI,CAACC,mBAAmB,CAACpB,IAAI,EAAEW,MAAM,CAAC;QAC1DC,OAAO,CAACH,IAAI,CAAC,GAAGU,WAAW,CAAC;QAC5BnB,IAAI,CAACK,UAAU,GAAGrB,WAAW;MAC/B;;MAEA;MACA,IAAIgB,IAAI,CAACR,MAAM,IAAI,CAAC,IAAIQ,IAAI,CAACG,CAAC,GAAGrB,MAAM,CAACS,MAAM,GAAGS,IAAI,CAACT,MAAM,EAAE;QAC5D,IAAI,CAACf,MAAM,CAAC6C,MAAM,CAACP,KAAK,EAAE,CAAC,CAAC;;QAE5B;QACA,IAAId,IAAI,CAACR,MAAM,IAAI,CAAC,EAAE;UACpB,IAAI,CAACb,gBAAgB,GAAGiB,IAAI,CAACsB,GAAG,CAAC,IAAI,CAACtC,aAAa,EAAE,IAAI,CAACD,gBAAgB,GAAG,CAAC,CAAC;QACjF;MACF;IACF,CAAC,CAAC;IAEF,OAAOiC,OAAO;EAChB;EAEQQ,mBAAmBA,CAACpB,IAAU,EAAEW,MAAW,EAAY;IAC7D,MAAMC,OAAiB,GAAG,EAAE;IAC5B,MAAM5B,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAE9B,QAAQc,IAAI,CAACN,aAAa;MACxB,KAAK,QAAQ;QACX;QACA,KAAK,IAAI4B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,MAAMC,KAAK,GAAIvC,WAAW,GAAG,GAAG,GAAKsC,CAAC,GAAG1B,IAAI,CAAC4B,EAAE,GAAG,CAAE;UACrDZ,OAAO,CAACH,IAAI,CAAC;YACXP,CAAC,EAAEF,IAAI,CAACE,CAAC,GAAGF,IAAI,CAACV,KAAK,GAAG,CAAC;YAC1Ba,CAAC,EAAEH,IAAI,CAACG,CAAC,GAAGH,IAAI,CAACT,MAAM;YACvBD,KAAK,EAAE,CAAC;YACRC,MAAM,EAAE,CAAC;YACTE,KAAK,EAAE,CAAC;YACRL,IAAI,EAAE,aAAa;YACnBC,KAAK,EAAE,SAAS;YAChBoC,MAAM,EAAE,CAAC;YACTC,KAAK,EAAE;UACT,CAAC,CAAC;QACJ;QACA;MAEF,KAAK,MAAM;QACT;QACA,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1BV,OAAO,CAACH,IAAI,CAAC;YACXP,CAAC,EAAEF,IAAI,CAACE,CAAC,GAAIoB,CAAC,GAAGtB,IAAI,CAACV,KAAK,GAAG,CAAE;YAChCa,CAAC,EAAEH,IAAI,CAACG,CAAC,GAAGH,IAAI,CAACT,MAAM;YACvBD,KAAK,EAAE,CAAC;YACRC,MAAM,EAAE,CAAC;YACTE,KAAK,EAAE,CAAC;YACRL,IAAI,EAAE,WAAW;YACjBC,KAAK,EAAE,SAAS;YAChBoC,MAAM,EAAE,CAAC;YACTC,KAAK,EAAE;UACT,CAAC,CAAC;QACJ;QACA;MAEF,KAAK,OAAO;QACV;QACA,MAAMH,KAAK,GAAG3B,IAAI,CAAC+B,KAAK,CAAChB,MAAM,CAACR,CAAC,GAAGH,IAAI,CAACG,CAAC,EAAEQ,MAAM,CAACT,CAAC,GAAGF,IAAI,CAACE,CAAC,CAAC;QAC9D,KAAK,IAAIoB,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC5BV,OAAO,CAACH,IAAI,CAAC;YACXP,CAAC,EAAEF,IAAI,CAACE,CAAC,GAAGF,IAAI,CAACV,KAAK,GAAG,CAAC;YAC1Ba,CAAC,EAAEH,IAAI,CAACG,CAAC,GAAGH,IAAI,CAACT,MAAM,GAAG,CAAC;YAC3BD,KAAK,EAAE,EAAE;YACTC,MAAM,EAAE,EAAE;YACVE,KAAK,EAAE,CAAC;YACRL,IAAI,EAAE,YAAY;YAClBC,KAAK,EAAE,SAAS;YAChBoC,MAAM,EAAE,CAAC;YACTC,KAAK,EAAE;UACT,CAAC,CAAC;QACJ;QACA;IACJ;IAEA,OAAOd,OAAO;EAChB;EAEAgB,UAAUA,CAACC,GAA6B,EAAQ;IAC9C,IAAI,CAACrD,MAAM,CAACqC,OAAO,CAACb,IAAI,IAAI;MAC1B;MACA6B,GAAG,CAACC,SAAS,GAAG9B,IAAI,CAACX,KAAK;MAC1BwC,GAAG,CAACE,QAAQ,CAAC/B,IAAI,CAACE,CAAC,EAAEF,IAAI,CAACG,CAAC,EAAEH,IAAI,CAACV,KAAK,EAAEU,IAAI,CAACT,MAAM,CAAC;;MAErD;MACAsC,GAAG,CAACC,SAAS,GAAG,SAAS;MACzBD,GAAG,CAACE,QAAQ,CAAC/B,IAAI,CAACE,CAAC,GAAG,CAAC,EAAEF,IAAI,CAACG,CAAC,GAAG,CAAC,EAAEH,IAAI,CAACV,KAAK,GAAG,EAAE,EAAEU,IAAI,CAACT,MAAM,GAAG,EAAE,CAAC;;MAEvE;MACAsC,GAAG,CAACG,WAAW,GAAGhC,IAAI,CAACX,KAAK;MAC5BwC,GAAG,CAACI,UAAU,GAAG,EAAE;MACnBJ,GAAG,CAACC,SAAS,GAAG9B,IAAI,CAACX,KAAK;MAC1BwC,GAAG,CAACE,QAAQ,CAAC/B,IAAI,CAACE,CAAC,EAAEF,IAAI,CAACG,CAAC,EAAEH,IAAI,CAACV,KAAK,EAAEU,IAAI,CAACT,MAAM,CAAC;MACrDsC,GAAG,CAACI,UAAU,GAAG,CAAC;;MAElB;MACA,MAAMC,QAAQ,GAAGlC,IAAI,CAACV,KAAK;MAC3B,MAAM6C,SAAS,GAAG,CAAC;MACnB,MAAMC,IAAI,GAAGpC,IAAI,CAACE,CAAC;MACnB,MAAMmC,IAAI,GAAGrC,IAAI,CAACG,CAAC,GAAG,EAAE;;MAExB;MACA0B,GAAG,CAACC,SAAS,GAAG,SAAS;MACzBD,GAAG,CAACE,QAAQ,CAACK,IAAI,EAAEC,IAAI,EAAEH,QAAQ,EAAEC,SAAS,CAAC;;MAE7C;MACA,MAAMG,aAAa,GAAGtC,IAAI,CAACR,MAAM,GAAGQ,IAAI,CAACI,SAAS;MAClDyB,GAAG,CAACC,SAAS,GAAG,SAAS;MACzBD,GAAG,CAACE,QAAQ,CAACK,IAAI,EAAEC,IAAI,EAAEH,QAAQ,GAAGI,aAAa,EAAEH,SAAS,CAAC;;MAE7D;MACAN,GAAG,CAACC,SAAS,GAAG,SAAS;MACzBD,GAAG,CAACU,IAAI,GAAG,YAAY;MACvBV,GAAG,CAACW,SAAS,GAAG,QAAQ;MACxBX,GAAG,CAACY,QAAQ,CACV,GAAGzC,IAAI,CAACR,MAAM,IAAIQ,IAAI,CAACI,SAAS,EAAE,EAClCJ,IAAI,CAACE,CAAC,GAAGF,IAAI,CAACV,KAAK,GAAG,CAAC,EACvB+C,IAAI,GAAG,CACT,CAAC;MAEDR,GAAG,CAACW,SAAS,GAAG,MAAM;IACxB,CAAC,CAAC;EACJ;EAEAE,SAASA,CAAA,EAAW;IAClB,OAAO,IAAI,CAAClE,MAAM;EACpB;EAEAmE,UAAUA,CAACC,MAAc,EAAQ;IAC/B,IAAI,CAACpE,MAAM,GAAG,IAAI,CAACA,MAAM,CAACqE,MAAM,CAAC7C,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAK2C,MAAM,CAAC;EAC9D;EAEAE,mBAAmBA,CAAA,EAAW;IAC5B,OAAO,IAAI,CAACnE,gBAAgB;EAC9B;EAEAoE,YAAYA,CAACxC,KAAa,EAAQ;IAChC,IAAI,CAAC5B,gBAAgB,GAAGiB,IAAI,CAACqB,GAAG,CAAC,CAAC,EAAErB,IAAI,CAACsB,GAAG,CAAC,IAAI,CAACtC,aAAa,EAAE2B,KAAK,CAAC,CAAC;EAC1E;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}