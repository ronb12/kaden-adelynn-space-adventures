{"ast":null,"code":"export class DifficultySystem{constructor(){this.currentDifficulty='medium';this.difficultySettings={easy:{name:'Easy',enemySpawnRate:2000,// 2 seconds\nenemySpeed:1.5,enemyHealth:1,bossSpawnRate:60000,// 1 minute\nbossHealth:50,powerUpSpawnRate:8000,// 8 seconds\nplayerHealth:100,playerSpeed:5,scoreMultiplier:1.0},medium:{name:'Medium',enemySpawnRate:1000,// 1 second\nenemySpeed:2.0,enemyHealth:1,bossSpawnRate:30000,// 30 seconds\nbossHealth:100,powerUpSpawnRate:5000,// 5 seconds\nplayerHealth:50,playerSpeed:4,scoreMultiplier:1.5},hard:{name:'Hard',enemySpawnRate:500,// 0.5 seconds\nenemySpeed:3.0,enemyHealth:2,bossSpawnRate:20000,// 20 seconds\nbossHealth:200,powerUpSpawnRate:3000,// 3 seconds\nplayerHealth:25,playerSpeed:3,scoreMultiplier:2.0}};}getCurrentDifficulty(){return this.currentDifficulty;}setDifficulty(difficulty){this.currentDifficulty=difficulty;}getDifficultySettings(){return this.difficultySettings[this.currentDifficulty];}getDifficultySettingsFor(difficulty){return this.difficultySettings[difficulty];}getAllDifficulties(){return Object.values(this.difficultySettings);}getDifficultyName(){return this.difficultySettings[this.currentDifficulty].name;}getEnemySpawnRate(){return this.difficultySettings[this.currentDifficulty].enemySpawnRate;}getEnemySpeed(){return this.difficultySettings[this.currentDifficulty].enemySpeed;}getEnemyHealth(){return this.difficultySettings[this.currentDifficulty].enemyHealth;}getBossSpawnRate(){return this.difficultySettings[this.currentDifficulty].bossSpawnRate;}getBossHealth(){return this.difficultySettings[this.currentDifficulty].bossHealth;}getPowerUpSpawnRate(){return this.difficultySettings[this.currentDifficulty].powerUpSpawnRate;}getPlayerHealth(){return this.difficultySettings[this.currentDifficulty].playerHealth;}getPlayerSpeed(){return this.difficultySettings[this.currentDifficulty].playerSpeed;}getScoreMultiplier(){return this.difficultySettings[this.currentDifficulty].scoreMultiplier;}// Dynamic difficulty adjustment based on player performance\nadjustDifficultyBasedOnPerformance(score,lives,gameTime){const performanceScore=score/1000+lives*100+gameTime/1000;if(performanceScore>1000&&this.currentDifficulty==='easy'){this.currentDifficulty='medium';}else if(performanceScore>2000&&this.currentDifficulty==='medium'){this.currentDifficulty='hard';}else if(performanceScore<500&&this.currentDifficulty==='hard'){this.currentDifficulty='medium';}else if(performanceScore<200&&this.currentDifficulty==='medium'){this.currentDifficulty='easy';}}// Progressive difficulty increase\nincreaseDifficulty(score){const scoreThresholds={easy:10000,medium:50000,hard:100000};if(score>=scoreThresholds[this.currentDifficulty]){switch(this.currentDifficulty){case'easy':this.currentDifficulty='medium';break;case'medium':this.currentDifficulty='hard';break;case'hard':// Already at maximum difficulty\nbreak;}}}// Get difficulty description\ngetDifficultyDescription(){switch(this.currentDifficulty){case'easy':return'Relaxed gameplay with slower enemies and more health';case'medium':return'Balanced challenge with moderate enemy speed and health';case'hard':return'Intense gameplay with fast enemies and limited health';default:return'Unknown difficulty';}}// Get difficulty color for UI\ngetDifficultyColor(){switch(this.currentDifficulty){case'easy':return'#00ff00';case'medium':return'#ffaa00';case'hard':return'#ff0000';default:return'#ffffff';}}}","map":{"version":3,"names":["DifficultySystem","constructor","currentDifficulty","difficultySettings","easy","name","enemySpawnRate","enemySpeed","enemyHealth","bossSpawnRate","bossHealth","powerUpSpawnRate","playerHealth","playerSpeed","scoreMultiplier","medium","hard","getCurrentDifficulty","setDifficulty","difficulty","getDifficultySettings","getDifficultySettingsFor","getAllDifficulties","Object","values","getDifficultyName","getEnemySpawnRate","getEnemySpeed","getEnemyHealth","getBossSpawnRate","getBossHealth","getPowerUpSpawnRate","getPlayerHealth","getPlayerSpeed","getScoreMultiplier","adjustDifficultyBasedOnPerformance","score","lives","gameTime","performanceScore","increaseDifficulty","scoreThresholds","getDifficultyDescription","getDifficultyColor"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/DifficultySystem.ts"],"sourcesContent":["export interface DifficultySettings {\n  name: string;\n  enemySpawnRate: number;\n  enemySpeed: number;\n  enemyHealth: number;\n  bossSpawnRate: number;\n  bossHealth: number;\n  powerUpSpawnRate: number;\n  playerHealth: number;\n  playerSpeed: number;\n  scoreMultiplier: number;\n}\n\nexport class DifficultySystem {\n  private currentDifficulty: 'easy' | 'medium' | 'hard' = 'medium';\n  private difficultySettings: { [key: string]: DifficultySettings } = {\n    easy: {\n      name: 'Easy',\n      enemySpawnRate: 2000, // 2 seconds\n      enemySpeed: 1.5,\n      enemyHealth: 1,\n      bossSpawnRate: 60000, // 1 minute\n      bossHealth: 50,\n      powerUpSpawnRate: 8000, // 8 seconds\n      playerHealth: 100,\n      playerSpeed: 5,\n      scoreMultiplier: 1.0\n    },\n    medium: {\n      name: 'Medium',\n      enemySpawnRate: 1000, // 1 second\n      enemySpeed: 2.0,\n      enemyHealth: 1,\n      bossSpawnRate: 30000, // 30 seconds\n      bossHealth: 100,\n      powerUpSpawnRate: 5000, // 5 seconds\n      playerHealth: 50,\n      playerSpeed: 4,\n      scoreMultiplier: 1.5\n    },\n    hard: {\n      name: 'Hard',\n      enemySpawnRate: 500, // 0.5 seconds\n      enemySpeed: 3.0,\n      enemyHealth: 2,\n      bossSpawnRate: 20000, // 20 seconds\n      bossHealth: 200,\n      powerUpSpawnRate: 3000, // 3 seconds\n      playerHealth: 25,\n      playerSpeed: 3,\n      scoreMultiplier: 2.0\n    }\n  };\n\n  getCurrentDifficulty(): 'easy' | 'medium' | 'hard' {\n    return this.currentDifficulty;\n  }\n\n  setDifficulty(difficulty: 'easy' | 'medium' | 'hard'): void {\n    this.currentDifficulty = difficulty;\n  }\n\n  getDifficultySettings(): DifficultySettings {\n    return this.difficultySettings[this.currentDifficulty];\n  }\n\n  getDifficultySettingsFor(difficulty: 'easy' | 'medium' | 'hard'): DifficultySettings {\n    return this.difficultySettings[difficulty];\n  }\n\n  getAllDifficulties(): DifficultySettings[] {\n    return Object.values(this.difficultySettings);\n  }\n\n  getDifficultyName(): string {\n    return this.difficultySettings[this.currentDifficulty].name;\n  }\n\n  getEnemySpawnRate(): number {\n    return this.difficultySettings[this.currentDifficulty].enemySpawnRate;\n  }\n\n  getEnemySpeed(): number {\n    return this.difficultySettings[this.currentDifficulty].enemySpeed;\n  }\n\n  getEnemyHealth(): number {\n    return this.difficultySettings[this.currentDifficulty].enemyHealth;\n  }\n\n  getBossSpawnRate(): number {\n    return this.difficultySettings[this.currentDifficulty].bossSpawnRate;\n  }\n\n  getBossHealth(): number {\n    return this.difficultySettings[this.currentDifficulty].bossHealth;\n  }\n\n  getPowerUpSpawnRate(): number {\n    return this.difficultySettings[this.currentDifficulty].powerUpSpawnRate;\n  }\n\n  getPlayerHealth(): number {\n    return this.difficultySettings[this.currentDifficulty].playerHealth;\n  }\n\n  getPlayerSpeed(): number {\n    return this.difficultySettings[this.currentDifficulty].playerSpeed;\n  }\n\n  getScoreMultiplier(): number {\n    return this.difficultySettings[this.currentDifficulty].scoreMultiplier;\n  }\n\n  // Dynamic difficulty adjustment based on player performance\n  adjustDifficultyBasedOnPerformance(score: number, lives: number, gameTime: number): void {\n    const performanceScore = (score / 1000) + (lives * 100) + (gameTime / 1000);\n    \n    if (performanceScore > 1000 && this.currentDifficulty === 'easy') {\n      this.currentDifficulty = 'medium';\n    } else if (performanceScore > 2000 && this.currentDifficulty === 'medium') {\n      this.currentDifficulty = 'hard';\n    } else if (performanceScore < 500 && this.currentDifficulty === 'hard') {\n      this.currentDifficulty = 'medium';\n    } else if (performanceScore < 200 && this.currentDifficulty === 'medium') {\n      this.currentDifficulty = 'easy';\n    }\n  }\n\n  // Progressive difficulty increase\n  increaseDifficulty(score: number): void {\n    const scoreThresholds = {\n      easy: 10000,\n      medium: 50000,\n      hard: 100000\n    };\n\n    if (score >= scoreThresholds[this.currentDifficulty]) {\n      switch (this.currentDifficulty) {\n        case 'easy':\n          this.currentDifficulty = 'medium';\n          break;\n        case 'medium':\n          this.currentDifficulty = 'hard';\n          break;\n        case 'hard':\n          // Already at maximum difficulty\n          break;\n      }\n    }\n  }\n\n  // Get difficulty description\n  getDifficultyDescription(): string {\n    switch (this.currentDifficulty) {\n      case 'easy':\n        return 'Relaxed gameplay with slower enemies and more health';\n      case 'medium':\n        return 'Balanced challenge with moderate enemy speed and health';\n      case 'hard':\n        return 'Intense gameplay with fast enemies and limited health';\n      default:\n        return 'Unknown difficulty';\n    }\n  }\n\n  // Get difficulty color for UI\n  getDifficultyColor(): string {\n    switch (this.currentDifficulty) {\n      case 'easy':\n        return '#00ff00';\n      case 'medium':\n        return '#ffaa00';\n      case 'hard':\n        return '#ff0000';\n      default:\n        return '#ffffff';\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}