{"ast":null,"code":"export class ComboSystem {\n  constructor() {\n    this.currentCombo = 0;\n    this.maxCombo = 0;\n    this.comboTimer = 0;\n    this.comboTimeout = 2000;\n    // 2 seconds to maintain combo\n    this.lastKillTime = 0;\n  }\n  addKill() {\n    const currentTime = Date.now();\n\n    // Reset combo if too much time has passed\n    if (currentTime - this.lastKillTime > this.comboTimeout) {\n      this.currentCombo = 0;\n    }\n    this.currentCombo++;\n    this.maxCombo = Math.max(this.maxCombo, this.currentCombo);\n    this.comboTimer = this.comboTimeout;\n    this.lastKillTime = currentTime;\n    return this.getComboMultiplier();\n  }\n  updateCombo(deltaTime) {\n    if (this.currentCombo > 0) {\n      this.comboTimer -= deltaTime;\n      if (this.comboTimer <= 0) {\n        this.resetCombo();\n      }\n    }\n  }\n  resetCombo() {\n    this.currentCombo = 0;\n    this.comboTimer = 0;\n  }\n  getComboMultiplier() {\n    if (this.currentCombo <= 1) return 1;\n    if (this.currentCombo <= 5) return 2;\n    if (this.currentCombo <= 10) return 3;\n    if (this.currentCombo <= 20) return 4;\n    return 5; // Max 5x multiplier\n  }\n  getComboScore(baseScore) {\n    return baseScore * this.getComboMultiplier();\n  }\n  getCurrentCombo() {\n    return this.currentCombo;\n  }\n  getMaxCombo() {\n    return this.maxCombo;\n  }\n  getComboTimeRemaining() {\n    return Math.max(0, this.comboTimer);\n  }\n  getComboProgress() {\n    if (this.currentCombo <= 1) return 0;\n    if (this.currentCombo <= 5) return (this.currentCombo - 1) / 4;\n    if (this.currentCombo <= 10) return (this.currentCombo - 5) / 5 + 0.25;\n    if (this.currentCombo <= 20) return (this.currentCombo - 10) / 10 + 0.5;\n    return 1;\n  }\n  updateGameStats(gameStats) {\n    gameStats.combo = this.currentCombo;\n    gameStats.maxCombo = this.maxCombo;\n  }\n  drawComboUI(ctx, canvas) {\n    if (this.currentCombo > 1) {\n      const multiplier = this.getComboMultiplier();\n      const progress = this.getComboProgress();\n      const timeRemaining = this.getComboTimeRemaining();\n\n      // Combo display\n      ctx.fillStyle = '#ffffff';\n      ctx.font = 'bold 24px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(`COMBO x${multiplier}!`, canvas.width / 2, 100);\n\n      // Combo progress bar\n      const barWidth = 200;\n      const barHeight = 10;\n      const barX = canvas.width / 2 - barWidth / 2;\n      const barY = 120;\n\n      // Background\n      ctx.fillStyle = '#333333';\n      ctx.fillRect(barX, barY, barWidth, barHeight);\n\n      // Progress fill\n      ctx.fillStyle = '#00ff00';\n      ctx.fillRect(barX, barY, barWidth * progress, barHeight);\n\n      // Time remaining indicator\n      ctx.fillStyle = '#ffff00';\n      ctx.font = '16px Arial';\n      ctx.fillText(`${Math.ceil(timeRemaining / 1000)}s`, canvas.width / 2, barY + 30);\n      ctx.textAlign = 'left';\n    }\n  }\n}","map":{"version":3,"names":["ComboSystem","constructor","currentCombo","maxCombo","comboTimer","comboTimeout","lastKillTime","addKill","currentTime","Date","now","Math","max","getComboMultiplier","updateCombo","deltaTime","resetCombo","getComboScore","baseScore","getCurrentCombo","getMaxCombo","getComboTimeRemaining","getComboProgress","updateGameStats","gameStats","combo","drawComboUI","ctx","canvas","multiplier","progress","timeRemaining","fillStyle","font","textAlign","fillText","width","barWidth","barHeight","barX","barY","fillRect","ceil"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/ComboSystem.ts"],"sourcesContent":["import { GameStats } from '../types/GameTypes';\n\nexport class ComboSystem {\n  private currentCombo: number = 0;\n  private maxCombo: number = 0;\n  private comboTimer: number = 0;\n  private comboTimeout: number = 2000; // 2 seconds to maintain combo\n  private lastKillTime: number = 0;\n\n  addKill(): number {\n    const currentTime = Date.now();\n    \n    // Reset combo if too much time has passed\n    if (currentTime - this.lastKillTime > this.comboTimeout) {\n      this.currentCombo = 0;\n    }\n    \n    this.currentCombo++;\n    this.maxCombo = Math.max(this.maxCombo, this.currentCombo);\n    this.comboTimer = this.comboTimeout;\n    this.lastKillTime = currentTime;\n    \n    return this.getComboMultiplier();\n  }\n\n  updateCombo(deltaTime: number): void {\n    if (this.currentCombo > 0) {\n      this.comboTimer -= deltaTime;\n      \n      if (this.comboTimer <= 0) {\n        this.resetCombo();\n      }\n    }\n  }\n\n  resetCombo(): void {\n    this.currentCombo = 0;\n    this.comboTimer = 0;\n  }\n\n  getComboMultiplier(): number {\n    if (this.currentCombo <= 1) return 1;\n    if (this.currentCombo <= 5) return 2;\n    if (this.currentCombo <= 10) return 3;\n    if (this.currentCombo <= 20) return 4;\n    return 5; // Max 5x multiplier\n  }\n\n  getComboScore(baseScore: number): number {\n    return baseScore * this.getComboMultiplier();\n  }\n\n  getCurrentCombo(): number {\n    return this.currentCombo;\n  }\n\n  getMaxCombo(): number {\n    return this.maxCombo;\n  }\n\n  getComboTimeRemaining(): number {\n    return Math.max(0, this.comboTimer);\n  }\n\n  getComboProgress(): number {\n    if (this.currentCombo <= 1) return 0;\n    if (this.currentCombo <= 5) return (this.currentCombo - 1) / 4;\n    if (this.currentCombo <= 10) return ((this.currentCombo - 5) / 5) + 0.25;\n    if (this.currentCombo <= 20) return ((this.currentCombo - 10) / 10) + 0.5;\n    return 1;\n  }\n\n  updateGameStats(gameStats: GameStats): void {\n    gameStats.combo = this.currentCombo;\n    gameStats.maxCombo = this.maxCombo;\n  }\n\n  drawComboUI(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement): void {\n    if (this.currentCombo > 1) {\n      const multiplier = this.getComboMultiplier();\n      const progress = this.getComboProgress();\n      const timeRemaining = this.getComboTimeRemaining();\n      \n      // Combo display\n      ctx.fillStyle = '#ffffff';\n      ctx.font = 'bold 24px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(\n        `COMBO x${multiplier}!`,\n        canvas.width / 2,\n        100\n      );\n      \n      // Combo progress bar\n      const barWidth = 200;\n      const barHeight = 10;\n      const barX = canvas.width / 2 - barWidth / 2;\n      const barY = 120;\n      \n      // Background\n      ctx.fillStyle = '#333333';\n      ctx.fillRect(barX, barY, barWidth, barHeight);\n      \n      // Progress fill\n      ctx.fillStyle = '#00ff00';\n      ctx.fillRect(barX, barY, barWidth * progress, barHeight);\n      \n      // Time remaining indicator\n      ctx.fillStyle = '#ffff00';\n      ctx.font = '16px Arial';\n      ctx.fillText(\n        `${Math.ceil(timeRemaining / 1000)}s`,\n        canvas.width / 2,\n        barY + 30\n      );\n      \n      ctx.textAlign = 'left';\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}