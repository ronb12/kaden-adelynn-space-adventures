{"ast":null,"code":"export class EnhancedEnemySystem {\n  constructor() {\n    this.enemies = [];\n    this.enemySpawnTimer = 0;\n    this.enemySpawnInterval = 1000;\n    // 1 second\n    this.enemyTypes = ['basic', 'fast', 'heavy', 'zigzag', 'kamikaze', 'shooter'];\n  }\n  spawnEnemy(canvas, score) {\n    const currentTime = Date.now();\n    if (currentTime - this.enemySpawnTimer > this.enemySpawnInterval) {\n      const enemyType = this.enemyTypes[Math.floor(Math.random() * this.enemyTypes.length)];\n      const enemy = {\n        x: Math.random() * (canvas.width - 40),\n        y: -40,\n        width: 40,\n        height: 40,\n        speed: this.getEnemySpeed(enemyType, score),\n        health: this.getEnemyHealth(enemyType, score),\n        maxHealth: this.getEnemyHealth(enemyType, score),\n        type: enemyType,\n        color: this.getEnemyColor(enemyType),\n        movementPattern: this.getEnemyMovementPattern(enemyType),\n        lastDirectionChange: currentTime,\n        direction: Math.random() > 0.5 ? 1 : -1\n      };\n      this.enemies.push(enemy);\n      this.enemySpawnTimer = currentTime;\n      return enemy;\n    }\n    return null;\n  }\n  getEnemySpeed(type, score) {\n    const baseSpeed = {\n      'basic': 2,\n      'fast': 4,\n      'heavy': 1,\n      'zigzag': 3,\n      'kamikaze': 5,\n      'shooter': 2\n    };\n    const speedIncrease = Math.floor(score / 5000) * 0.5;\n    return Math.min(8, baseSpeed[type] + speedIncrease);\n  }\n  getEnemyHealth(type, score) {\n    const baseHealth = {\n      'basic': 1,\n      'fast': 1,\n      'heavy': 3,\n      'zigzag': 2,\n      'kamikaze': 1,\n      'shooter': 2\n    };\n    const healthIncrease = Math.floor(score / 10000);\n    return baseHealth[type] + healthIncrease;\n  }\n  getEnemyColor(type) {\n    const colors = {\n      'basic': '#ff0000',\n      'fast': '#00ff00',\n      'heavy': '#0000ff',\n      'zigzag': '#ffff00',\n      'kamikaze': '#ff6600',\n      'shooter': '#ff00ff'\n    };\n    return colors[type] || '#ff0000';\n  }\n  getEnemyMovementPattern(type) {\n    const patterns = {\n      'basic': 'straight',\n      'fast': 'straight',\n      'heavy': 'straight',\n      'zigzag': 'zigzag',\n      'kamikaze': 'kamikaze',\n      'shooter': 'straight'\n    };\n    return patterns[type] || 'straight';\n  }\n  updateEnemies(canvas, player) {\n    const bullets = [];\n    const currentTime = Date.now();\n    this.enemies.forEach((enemy, index) => {\n      // Update enemy position based on movement pattern\n      this.updateEnemyMovement(enemy, canvas, currentTime);\n\n      // Enemy attacks (for shooter type)\n      if (enemy.type === 'shooter' && currentTime - enemy.lastDirectionChange > 2000) {\n        bullets.push({\n          x: enemy.x + enemy.width / 2 - 2,\n          y: enemy.y + enemy.height,\n          width: 4,\n          height: 8,\n          speed: 3,\n          type: 'enemy_laser',\n          color: '#ff00ff',\n          damage: 1,\n          owner: 'enemy'\n        });\n        enemy.lastDirectionChange = currentTime;\n      }\n\n      // Remove enemy if destroyed or off-screen\n      if (enemy.health <= 0 || enemy.y > canvas.height + enemy.height) {\n        this.enemies.splice(index, 1);\n      }\n    });\n    return bullets;\n  }\n  updateEnemyMovement(enemy, canvas, currentTime) {\n    switch (enemy.movementPattern) {\n      case 'straight':\n        enemy.y += enemy.speed;\n        break;\n      case 'zigzag':\n        enemy.y += enemy.speed;\n        enemy.x += enemy.direction * enemy.speed;\n\n        // Change direction when hitting edges\n        if (enemy.x <= 0 || enemy.x >= canvas.width - enemy.width) {\n          enemy.direction *= -1;\n        }\n        break;\n      case 'kamikaze':\n        // Move towards player\n        const player = {\n          x: canvas.width / 2,\n          y: canvas.height - 100\n        }; // Simplified player position\n        const dx = player.x - enemy.x;\n        const dy = player.y - enemy.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (distance > 0) {\n          enemy.x += dx / distance * enemy.speed;\n          enemy.y += dy / distance * enemy.speed;\n        }\n        break;\n    }\n  }\n  drawEnemies(ctx) {\n    this.enemies.forEach(enemy => {\n      // Draw enemy body\n      ctx.fillStyle = enemy.color;\n      ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);\n\n      // Draw enemy details based on type\n      ctx.fillStyle = '#ffffff';\n      switch (enemy.type) {\n        case 'basic':\n          ctx.fillRect(enemy.x + 5, enemy.y + 5, enemy.width - 10, enemy.height - 10);\n          break;\n        case 'fast':\n          ctx.fillRect(enemy.x + 10, enemy.y + 10, enemy.width - 20, enemy.height - 20);\n          break;\n        case 'heavy':\n          ctx.fillRect(enemy.x + 2, enemy.y + 2, enemy.width - 4, enemy.height - 4);\n          break;\n        case 'zigzag':\n          ctx.fillRect(enemy.x + 8, enemy.y + 8, enemy.width - 16, enemy.height - 16);\n          break;\n        case 'kamikaze':\n          ctx.fillRect(enemy.x + 6, enemy.y + 6, enemy.width - 12, enemy.height - 12);\n          break;\n        case 'shooter':\n          ctx.fillRect(enemy.x + 4, enemy.y + 4, enemy.width - 8, enemy.height - 8);\n          break;\n      }\n\n      // Draw enemy glow effect\n      ctx.shadowColor = enemy.color;\n      ctx.shadowBlur = 5;\n      ctx.fillStyle = enemy.color;\n      ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);\n      ctx.shadowBlur = 0;\n\n      // Draw health bar for enemies with more than 1 health\n      if (enemy.maxHealth > 1) {\n        const barWidth = enemy.width;\n        const barHeight = 4;\n        const barX = enemy.x;\n        const barY = enemy.y - 8;\n\n        // Background\n        ctx.fillStyle = '#333333';\n        ctx.fillRect(barX, barY, barWidth, barHeight);\n\n        // Health fill\n        const healthPercent = enemy.health / enemy.maxHealth;\n        ctx.fillStyle = '#ff0000';\n        ctx.fillRect(barX, barY, barWidth * healthPercent, barHeight);\n      }\n    });\n  }\n  getEnemies() {\n    return this.enemies;\n  }\n  removeEnemy(enemyIndex) {\n    this.enemies.splice(enemyIndex, 1);\n  }\n  damageEnemy(enemyIndex, damage) {\n    if (enemyIndex >= 0 && enemyIndex < this.enemies.length) {\n      this.enemies[enemyIndex].health -= damage;\n      return this.enemies[enemyIndex].health <= 0;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["EnhancedEnemySystem","constructor","enemies","enemySpawnTimer","enemySpawnInterval","enemyTypes","spawnEnemy","canvas","score","currentTime","Date","now","enemyType","Math","floor","random","length","enemy","x","width","y","height","speed","getEnemySpeed","health","getEnemyHealth","maxHealth","type","color","getEnemyColor","movementPattern","getEnemyMovementPattern","lastDirectionChange","direction","push","baseSpeed","speedIncrease","min","baseHealth","healthIncrease","colors","patterns","updateEnemies","player","bullets","forEach","index","updateEnemyMovement","damage","owner","splice","dx","dy","distance","sqrt","drawEnemies","ctx","fillStyle","fillRect","shadowColor","shadowBlur","barWidth","barHeight","barX","barY","healthPercent","getEnemies","removeEnemy","enemyIndex","damageEnemy"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/EnhancedEnemySystem.ts"],"sourcesContent":["import { Enemy, Bullet } from '../types/GameTypes';\nimport { ShipRenderer } from '../graphics/ShipDesigns';\n\nexport class EnhancedEnemySystem {\n  private enemies: Enemy[] = [];\n  private enemySpawnTimer: number = 0;\n  private enemySpawnInterval: number = 1000; // 1 second\n  private enemyTypes = ['basic', 'fast', 'heavy', 'zigzag', 'kamikaze', 'shooter'];\n\n  spawnEnemy(canvas: HTMLCanvasElement, score: number): Enemy | null {\n    const currentTime = Date.now();\n    \n    if (currentTime - this.enemySpawnTimer > this.enemySpawnInterval) {\n      const enemyType = this.enemyTypes[Math.floor(Math.random() * this.enemyTypes.length)];\n      \n      const enemy: Enemy = {\n        x: Math.random() * (canvas.width - 40),\n        y: -40,\n        width: 40,\n        height: 40,\n        speed: this.getEnemySpeed(enemyType, score),\n        health: this.getEnemyHealth(enemyType, score),\n        maxHealth: this.getEnemyHealth(enemyType, score),\n        type: enemyType,\n        color: this.getEnemyColor(enemyType),\n        movementPattern: this.getEnemyMovementPattern(enemyType),\n        lastDirectionChange: currentTime,\n        direction: Math.random() > 0.5 ? 1 : -1\n      };\n\n      this.enemies.push(enemy);\n      this.enemySpawnTimer = currentTime;\n      \n      return enemy;\n    }\n    \n    return null;\n  }\n\n  private getEnemySpeed(type: string, score: number): number {\n    const baseSpeed: { [key: string]: number } = {\n      'basic': 2,\n      'fast': 4,\n      'heavy': 1,\n      'zigzag': 3,\n      'kamikaze': 5,\n      'shooter': 2\n    };\n    \n    const speedIncrease = Math.floor(score / 5000) * 0.5;\n    return Math.min(8, baseSpeed[type] + speedIncrease);\n  }\n\n  private getEnemyHealth(type: string, score: number): number {\n    const baseHealth: { [key: string]: number } = {\n      'basic': 1,\n      'fast': 1,\n      'heavy': 3,\n      'zigzag': 2,\n      'kamikaze': 1,\n      'shooter': 2\n    };\n    \n    const healthIncrease = Math.floor(score / 10000);\n    return baseHealth[type] + healthIncrease;\n  }\n\n  private getEnemyColor(type: string): string {\n    const colors: { [key: string]: string } = {\n      'basic': '#ff0000',\n      'fast': '#00ff00',\n      'heavy': '#0000ff',\n      'zigzag': '#ffff00',\n      'kamikaze': '#ff6600',\n      'shooter': '#ff00ff'\n    };\n    \n    return colors[type] || '#ff0000';\n  }\n\n  private getEnemyMovementPattern(type: string): string {\n    const patterns: { [key: string]: string } = {\n      'basic': 'straight',\n      'fast': 'straight',\n      'heavy': 'straight',\n      'zigzag': 'zigzag',\n      'kamikaze': 'kamikaze',\n      'shooter': 'straight'\n    };\n    \n    return patterns[type] || 'straight';\n  }\n\n  updateEnemies(canvas: HTMLCanvasElement, player: any): Bullet[] {\n    const bullets: Bullet[] = [];\n    const currentTime = Date.now();\n    \n    this.enemies.forEach((enemy, index) => {\n      // Update enemy position based on movement pattern\n      this.updateEnemyMovement(enemy, canvas, currentTime);\n      \n      // Enemy attacks (for shooter type)\n      if (enemy.type === 'shooter' && currentTime - enemy.lastDirectionChange > 2000) {\n        bullets.push({\n          x: enemy.x + enemy.width / 2 - 2,\n          y: enemy.y + enemy.height,\n          width: 4,\n          height: 8,\n          speed: 3,\n          type: 'enemy_laser',\n          color: '#ff00ff',\n          damage: 1,\n          owner: 'enemy'\n        });\n        enemy.lastDirectionChange = currentTime;\n      }\n      \n      // Remove enemy if destroyed or off-screen\n      if (enemy.health <= 0 || enemy.y > canvas.height + enemy.height) {\n        this.enemies.splice(index, 1);\n      }\n    });\n    \n    return bullets;\n  }\n\n  private updateEnemyMovement(enemy: Enemy, canvas: HTMLCanvasElement, currentTime: number): void {\n    switch (enemy.movementPattern) {\n      case 'straight':\n        enemy.y += enemy.speed;\n        break;\n        \n      case 'zigzag':\n        enemy.y += enemy.speed;\n        enemy.x += enemy.direction * enemy.speed;\n        \n        // Change direction when hitting edges\n        if (enemy.x <= 0 || enemy.x >= canvas.width - enemy.width) {\n          enemy.direction *= -1;\n        }\n        break;\n        \n      case 'kamikaze':\n        // Move towards player\n        const player = { x: canvas.width / 2, y: canvas.height - 100 }; // Simplified player position\n        const dx = player.x - enemy.x;\n        const dy = player.y - enemy.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > 0) {\n          enemy.x += (dx / distance) * enemy.speed;\n          enemy.y += (dy / distance) * enemy.speed;\n        }\n        break;\n    }\n  }\n\n  drawEnemies(ctx: CanvasRenderingContext2D): void {\n    this.enemies.forEach(enemy => {\n      // Draw enemy body\n      ctx.fillStyle = enemy.color;\n      ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);\n      \n      // Draw enemy details based on type\n      ctx.fillStyle = '#ffffff';\n      \n      switch (enemy.type) {\n        case 'basic':\n          ctx.fillRect(enemy.x + 5, enemy.y + 5, enemy.width - 10, enemy.height - 10);\n          break;\n          \n        case 'fast':\n          ctx.fillRect(enemy.x + 10, enemy.y + 10, enemy.width - 20, enemy.height - 20);\n          break;\n          \n        case 'heavy':\n          ctx.fillRect(enemy.x + 2, enemy.y + 2, enemy.width - 4, enemy.height - 4);\n          break;\n          \n        case 'zigzag':\n          ctx.fillRect(enemy.x + 8, enemy.y + 8, enemy.width - 16, enemy.height - 16);\n          break;\n          \n        case 'kamikaze':\n          ctx.fillRect(enemy.x + 6, enemy.y + 6, enemy.width - 12, enemy.height - 12);\n          break;\n          \n        case 'shooter':\n          ctx.fillRect(enemy.x + 4, enemy.y + 4, enemy.width - 8, enemy.height - 8);\n          break;\n      }\n      \n      // Draw enemy glow effect\n      ctx.shadowColor = enemy.color;\n      ctx.shadowBlur = 5;\n      ctx.fillStyle = enemy.color;\n      ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);\n      ctx.shadowBlur = 0;\n      \n      // Draw health bar for enemies with more than 1 health\n      if (enemy.maxHealth > 1) {\n        const barWidth = enemy.width;\n        const barHeight = 4;\n        const barX = enemy.x;\n        const barY = enemy.y - 8;\n        \n        // Background\n        ctx.fillStyle = '#333333';\n        ctx.fillRect(barX, barY, barWidth, barHeight);\n        \n        // Health fill\n        const healthPercent = enemy.health / enemy.maxHealth;\n        ctx.fillStyle = '#ff0000';\n        ctx.fillRect(barX, barY, barWidth * healthPercent, barHeight);\n      }\n    });\n  }\n\n  getEnemies(): Enemy[] {\n    return this.enemies;\n  }\n\n  removeEnemy(enemyIndex: number): void {\n    this.enemies.splice(enemyIndex, 1);\n  }\n\n  damageEnemy(enemyIndex: number, damage: number): boolean {\n    if (enemyIndex >= 0 && enemyIndex < this.enemies.length) {\n      this.enemies[enemyIndex].health -= damage;\n      return this.enemies[enemyIndex].health <= 0;\n    }\n    return false;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}