{"ast":null,"code":"export class EnhancedEnemySystem{constructor(){this.enemies=[];this.enemySpawnTimer=0;this.enemySpawnInterval=1000;// 1 second\nthis.enemyTypes=['basic','fast','heavy','zigzag','kamikaze','shooter'];}spawnEnemy(canvas,score){const currentTime=Date.now();if(currentTime-this.enemySpawnTimer>this.enemySpawnInterval){const enemyType=this.enemyTypes[Math.floor(Math.random()*this.enemyTypes.length)];const enemy={x:Math.random()*(canvas.width-40),y:-40,width:40,height:40,speed:this.getEnemySpeed(enemyType,score),health:this.getEnemyHealth(enemyType,score),maxHealth:this.getEnemyHealth(enemyType,score),type:enemyType,color:this.getEnemyColor(enemyType),movementPattern:this.getEnemyMovementPattern(enemyType),lastDirectionChange:currentTime,direction:Math.random()>0.5?1:-1};this.enemies.push(enemy);this.enemySpawnTimer=currentTime;return enemy;}return null;}getEnemySpeed(type,score){const baseSpeed={'basic':2,'fast':4,'heavy':1,'zigzag':3,'kamikaze':5,'shooter':2};const speedIncrease=Math.floor(score/5000)*0.5;return Math.min(8,baseSpeed[type]+speedIncrease);}getEnemyHealth(type,score){const baseHealth={'basic':1,'fast':1,'heavy':3,'zigzag':2,'kamikaze':1,'shooter':2};const healthIncrease=Math.floor(score/10000);return baseHealth[type]+healthIncrease;}getEnemyColor(type){const colors={'basic':'#ff0000','fast':'#00ff00','heavy':'#0000ff','zigzag':'#ffff00','kamikaze':'#ff6600','shooter':'#ff00ff'};return colors[type]||'#ff0000';}getEnemyMovementPattern(type){const patterns={'basic':'straight','fast':'straight','heavy':'straight','zigzag':'zigzag','kamikaze':'kamikaze','shooter':'straight'};return patterns[type]||'straight';}updateEnemies(canvas,player){const bullets=[];const currentTime=Date.now();this.enemies.forEach((enemy,index)=>{// Update enemy position based on movement pattern\nthis.updateEnemyMovement(enemy,canvas,currentTime);// Enemy attacks (for shooter type)\nif(enemy.type==='shooter'&&currentTime-enemy.lastDirectionChange>2000){bullets.push({x:enemy.x+enemy.width/2-2,y:enemy.y+enemy.height,width:4,height:8,speed:3,type:'enemy_laser',color:'#ff00ff',damage:1,owner:'enemy'});enemy.lastDirectionChange=currentTime;}// Remove enemy if destroyed or off-screen\nif(enemy.health<=0||enemy.y>canvas.height+enemy.height){this.enemies.splice(index,1);}});return bullets;}updateEnemyMovement(enemy,canvas,currentTime){switch(enemy.movementPattern){case'straight':enemy.y+=enemy.speed;break;case'zigzag':enemy.y+=enemy.speed;enemy.x+=enemy.direction*enemy.speed;// Change direction when hitting edges\nif(enemy.x<=0||enemy.x>=canvas.width-enemy.width){enemy.direction*=-1;}break;case'kamikaze':// Move towards player\nconst player={x:canvas.width/2,y:canvas.height-100};// Simplified player position\nconst dx=player.x-enemy.x;const dy=player.y-enemy.y;const distance=Math.sqrt(dx*dx+dy*dy);if(distance>0){enemy.x+=dx/distance*enemy.speed;enemy.y+=dy/distance*enemy.speed;}break;}}drawEnemies(ctx){this.enemies.forEach(enemy=>{// Draw enemy body\nctx.fillStyle=enemy.color;ctx.fillRect(enemy.x,enemy.y,enemy.width,enemy.height);// Draw enemy details based on type\nctx.fillStyle='#ffffff';switch(enemy.type){case'basic':ctx.fillRect(enemy.x+5,enemy.y+5,enemy.width-10,enemy.height-10);break;case'fast':ctx.fillRect(enemy.x+10,enemy.y+10,enemy.width-20,enemy.height-20);break;case'heavy':ctx.fillRect(enemy.x+2,enemy.y+2,enemy.width-4,enemy.height-4);break;case'zigzag':ctx.fillRect(enemy.x+8,enemy.y+8,enemy.width-16,enemy.height-16);break;case'kamikaze':ctx.fillRect(enemy.x+6,enemy.y+6,enemy.width-12,enemy.height-12);break;case'shooter':ctx.fillRect(enemy.x+4,enemy.y+4,enemy.width-8,enemy.height-8);break;}// Draw enemy glow effect\nctx.shadowColor=enemy.color;ctx.shadowBlur=5;ctx.fillStyle=enemy.color;ctx.fillRect(enemy.x,enemy.y,enemy.width,enemy.height);ctx.shadowBlur=0;// Draw health bar for enemies with more than 1 health\nif(enemy.maxHealth>1){const barWidth=enemy.width;const barHeight=4;const barX=enemy.x;const barY=enemy.y-8;// Background\nctx.fillStyle='#333333';ctx.fillRect(barX,barY,barWidth,barHeight);// Health fill\nconst healthPercent=enemy.health/enemy.maxHealth;ctx.fillStyle='#ff0000';ctx.fillRect(barX,barY,barWidth*healthPercent,barHeight);}});}getEnemies(){return this.enemies;}removeEnemy(enemyIndex){this.enemies.splice(enemyIndex,1);}damageEnemy(enemyIndex,damage){if(enemyIndex>=0&&enemyIndex<this.enemies.length){this.enemies[enemyIndex].health-=damage;return this.enemies[enemyIndex].health<=0;}return false;}}","map":{"version":3,"names":["EnhancedEnemySystem","constructor","enemies","enemySpawnTimer","enemySpawnInterval","enemyTypes","spawnEnemy","canvas","score","currentTime","Date","now","enemyType","Math","floor","random","length","enemy","x","width","y","height","speed","getEnemySpeed","health","getEnemyHealth","maxHealth","type","color","getEnemyColor","movementPattern","getEnemyMovementPattern","lastDirectionChange","direction","push","baseSpeed","speedIncrease","min","baseHealth","healthIncrease","colors","patterns","updateEnemies","player","bullets","forEach","index","updateEnemyMovement","damage","owner","splice","dx","dy","distance","sqrt","drawEnemies","ctx","fillStyle","fillRect","shadowColor","shadowBlur","barWidth","barHeight","barX","barY","healthPercent","getEnemies","removeEnemy","enemyIndex","damageEnemy"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/EnhancedEnemySystem.ts"],"sourcesContent":["import { Enemy, Bullet } from '../types/GameTypes';\n\nexport class EnhancedEnemySystem {\n  private enemies: Enemy[] = [];\n  private enemySpawnTimer: number = 0;\n  private enemySpawnInterval: number = 1000; // 1 second\n  private enemyTypes = ['basic', 'fast', 'heavy', 'zigzag', 'kamikaze', 'shooter'];\n\n  spawnEnemy(canvas: HTMLCanvasElement, score: number): Enemy | null {\n    const currentTime = Date.now();\n    \n    if (currentTime - this.enemySpawnTimer > this.enemySpawnInterval) {\n      const enemyType = this.enemyTypes[Math.floor(Math.random() * this.enemyTypes.length)];\n      \n      const enemy: Enemy = {\n        x: Math.random() * (canvas.width - 40),\n        y: -40,\n        width: 40,\n        height: 40,\n        speed: this.getEnemySpeed(enemyType, score),\n        health: this.getEnemyHealth(enemyType, score),\n        maxHealth: this.getEnemyHealth(enemyType, score),\n        type: enemyType,\n        color: this.getEnemyColor(enemyType),\n        movementPattern: this.getEnemyMovementPattern(enemyType),\n        lastDirectionChange: currentTime,\n        direction: Math.random() > 0.5 ? 1 : -1\n      };\n\n      this.enemies.push(enemy);\n      this.enemySpawnTimer = currentTime;\n      \n      return enemy;\n    }\n    \n    return null;\n  }\n\n  private getEnemySpeed(type: string, score: number): number {\n    const baseSpeed: { [key: string]: number } = {\n      'basic': 2,\n      'fast': 4,\n      'heavy': 1,\n      'zigzag': 3,\n      'kamikaze': 5,\n      'shooter': 2\n    };\n    \n    const speedIncrease = Math.floor(score / 5000) * 0.5;\n    return Math.min(8, baseSpeed[type] + speedIncrease);\n  }\n\n  private getEnemyHealth(type: string, score: number): number {\n    const baseHealth: { [key: string]: number } = {\n      'basic': 1,\n      'fast': 1,\n      'heavy': 3,\n      'zigzag': 2,\n      'kamikaze': 1,\n      'shooter': 2\n    };\n    \n    const healthIncrease = Math.floor(score / 10000);\n    return baseHealth[type] + healthIncrease;\n  }\n\n  private getEnemyColor(type: string): string {\n    const colors: { [key: string]: string } = {\n      'basic': '#ff0000',\n      'fast': '#00ff00',\n      'heavy': '#0000ff',\n      'zigzag': '#ffff00',\n      'kamikaze': '#ff6600',\n      'shooter': '#ff00ff'\n    };\n    \n    return colors[type] || '#ff0000';\n  }\n\n  private getEnemyMovementPattern(type: string): string {\n    const patterns = {\n      'basic': 'straight',\n      'fast': 'straight',\n      'heavy': 'straight',\n      'zigzag': 'zigzag',\n      'kamikaze': 'kamikaze',\n      'shooter': 'straight'\n    };\n    \n    return patterns[type] || 'straight';\n  }\n\n  updateEnemies(canvas: HTMLCanvasElement, player: any): Bullet[] {\n    const bullets: Bullet[] = [];\n    const currentTime = Date.now();\n    \n    this.enemies.forEach((enemy, index) => {\n      // Update enemy position based on movement pattern\n      this.updateEnemyMovement(enemy, canvas, currentTime);\n      \n      // Enemy attacks (for shooter type)\n      if (enemy.type === 'shooter' && currentTime - enemy.lastDirectionChange > 2000) {\n        bullets.push({\n          x: enemy.x + enemy.width / 2 - 2,\n          y: enemy.y + enemy.height,\n          width: 4,\n          height: 8,\n          speed: 3,\n          type: 'enemy_laser',\n          color: '#ff00ff',\n          damage: 1,\n          owner: 'enemy'\n        });\n        enemy.lastDirectionChange = currentTime;\n      }\n      \n      // Remove enemy if destroyed or off-screen\n      if (enemy.health <= 0 || enemy.y > canvas.height + enemy.height) {\n        this.enemies.splice(index, 1);\n      }\n    });\n    \n    return bullets;\n  }\n\n  private updateEnemyMovement(enemy: Enemy, canvas: HTMLCanvasElement, currentTime: number): void {\n    switch (enemy.movementPattern) {\n      case 'straight':\n        enemy.y += enemy.speed;\n        break;\n        \n      case 'zigzag':\n        enemy.y += enemy.speed;\n        enemy.x += enemy.direction * enemy.speed;\n        \n        // Change direction when hitting edges\n        if (enemy.x <= 0 || enemy.x >= canvas.width - enemy.width) {\n          enemy.direction *= -1;\n        }\n        break;\n        \n      case 'kamikaze':\n        // Move towards player\n        const player = { x: canvas.width / 2, y: canvas.height - 100 }; // Simplified player position\n        const dx = player.x - enemy.x;\n        const dy = player.y - enemy.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        \n        if (distance > 0) {\n          enemy.x += (dx / distance) * enemy.speed;\n          enemy.y += (dy / distance) * enemy.speed;\n        }\n        break;\n    }\n  }\n\n  drawEnemies(ctx: CanvasRenderingContext2D): void {\n    this.enemies.forEach(enemy => {\n      // Draw enemy body\n      ctx.fillStyle = enemy.color;\n      ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);\n      \n      // Draw enemy details based on type\n      ctx.fillStyle = '#ffffff';\n      \n      switch (enemy.type) {\n        case 'basic':\n          ctx.fillRect(enemy.x + 5, enemy.y + 5, enemy.width - 10, enemy.height - 10);\n          break;\n          \n        case 'fast':\n          ctx.fillRect(enemy.x + 10, enemy.y + 10, enemy.width - 20, enemy.height - 20);\n          break;\n          \n        case 'heavy':\n          ctx.fillRect(enemy.x + 2, enemy.y + 2, enemy.width - 4, enemy.height - 4);\n          break;\n          \n        case 'zigzag':\n          ctx.fillRect(enemy.x + 8, enemy.y + 8, enemy.width - 16, enemy.height - 16);\n          break;\n          \n        case 'kamikaze':\n          ctx.fillRect(enemy.x + 6, enemy.y + 6, enemy.width - 12, enemy.height - 12);\n          break;\n          \n        case 'shooter':\n          ctx.fillRect(enemy.x + 4, enemy.y + 4, enemy.width - 8, enemy.height - 8);\n          break;\n      }\n      \n      // Draw enemy glow effect\n      ctx.shadowColor = enemy.color;\n      ctx.shadowBlur = 5;\n      ctx.fillStyle = enemy.color;\n      ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);\n      ctx.shadowBlur = 0;\n      \n      // Draw health bar for enemies with more than 1 health\n      if (enemy.maxHealth > 1) {\n        const barWidth = enemy.width;\n        const barHeight = 4;\n        const barX = enemy.x;\n        const barY = enemy.y - 8;\n        \n        // Background\n        ctx.fillStyle = '#333333';\n        ctx.fillRect(barX, barY, barWidth, barHeight);\n        \n        // Health fill\n        const healthPercent = enemy.health / enemy.maxHealth;\n        ctx.fillStyle = '#ff0000';\n        ctx.fillRect(barX, barY, barWidth * healthPercent, barHeight);\n      }\n    });\n  }\n\n  getEnemies(): Enemy[] {\n    return this.enemies;\n  }\n\n  removeEnemy(enemyIndex: number): void {\n    this.enemies.splice(enemyIndex, 1);\n  }\n\n  damageEnemy(enemyIndex: number, damage: number): boolean {\n    if (enemyIndex >= 0 && enemyIndex < this.enemies.length) {\n      this.enemies[enemyIndex].health -= damage;\n      return this.enemies[enemyIndex].health <= 0;\n    }\n    return false;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}