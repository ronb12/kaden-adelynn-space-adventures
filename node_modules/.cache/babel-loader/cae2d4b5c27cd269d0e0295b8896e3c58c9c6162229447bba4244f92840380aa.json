{"ast":null,"code":"export class PowerUpSystem {\n  constructor() {\n    this.powerUps = [];\n    this.spawnTimer = 0;\n    this.spawnInterval = 5000;\n  }\n  // 5 seconds\n\n  spawnPowerUp(canvas, score) {\n    const currentTime = Date.now();\n\n    // Spawn power-up every 5 seconds or when score reaches certain thresholds\n    if (currentTime - this.spawnTimer > this.spawnInterval || score > 0 && score % 2000 === 0) {\n      const powerUpTypes = [{\n        type: 'score',\n        color: '#ffff00',\n        icon: '💎',\n        duration: 0,\n        value: 500\n      }, {\n        type: 'health',\n        color: '#ff0000',\n        icon: '❤️',\n        duration: 0,\n        value: 25\n      }, {\n        type: 'life',\n        color: '#ff00ff',\n        icon: '👤',\n        duration: 0,\n        value: 1\n      }, {\n        type: 'rapid',\n        color: '#00ffff',\n        icon: '⚡',\n        duration: 3000,\n        value: 1\n      }, {\n        type: 'shield',\n        color: '#0000ff',\n        icon: '🛡️',\n        duration: 5000,\n        value: 1\n      }, {\n        type: 'weapon',\n        color: '#00ff00',\n        icon: '🔫',\n        duration: 0,\n        value: 1\n      }, {\n        type: 'double',\n        color: '#ff6600',\n        icon: '🔫⚡',\n        duration: 10000,\n        value: 1\n      }, {\n        type: 'speed',\n        color: '#6600ff',\n        icon: '🚀',\n        duration: 8000,\n        value: 2\n      }, {\n        type: 'wing',\n        color: '#ff0066',\n        icon: '✈️',\n        duration: 0,\n        value: 1\n      }];\n      const powerUpType = powerUpTypes[Math.floor(Math.random() * powerUpTypes.length)];\n      const powerUp = {\n        x: Math.random() * (canvas.width - 20),\n        y: -20,\n        width: 20,\n        height: 20,\n        type: powerUpType.type,\n        color: powerUpType.color,\n        icon: powerUpType.icon,\n        duration: powerUpType.duration,\n        value: powerUpType.value\n      };\n      this.powerUps.push(powerUp);\n      this.spawnTimer = currentTime;\n      return powerUp;\n    }\n    return null;\n  }\n  updatePowerUps(canvas) {\n    this.powerUps = this.powerUps.filter(powerUp => {\n      powerUp.y += 2;\n      return powerUp.y < canvas.height + powerUp.height;\n    });\n  }\n  getPowerUps() {\n    return this.powerUps;\n  }\n  removePowerUp(powerUpId) {\n    this.powerUps.splice(powerUpId, 1);\n  }\n  collectPowerUp(powerUp, player) {\n    switch (powerUp.type) {\n      case 'score':\n        player.score += powerUp.value;\n        break;\n      case 'health':\n        player.health = Math.min(player.maxHealth, player.health + powerUp.value);\n        break;\n      case 'life':\n        player.lives += powerUp.value;\n        break;\n      case 'rapid':\n        player.rapidFire = true;\n        player.rapidFireTime = powerUp.duration;\n        break;\n      case 'shield':\n        player.hasShield = true;\n        player.shieldTime = powerUp.duration;\n        break;\n      case 'double':\n        player.doubleShot = true;\n        break;\n      case 'speed':\n        player.speed = Math.min(player.maxSpeed, player.speed + powerUp.value);\n        break;\n      case 'wing':\n        if (player.wingFighters.length < 2) {\n          player.wingFighters.push({\n            id: `wing_${Date.now()}`,\n            x: player.x - 50,\n            y: player.y,\n            width: player.width,\n            height: player.height,\n            speed: player.speed,\n            targetX: player.x - 50,\n            targetY: player.y,\n            offset: player.wingFighters.length === 0 ? -50 : 50\n          });\n        }\n        break;\n    }\n  }\n}","map":{"version":3,"names":["PowerUpSystem","constructor","powerUps","spawnTimer","spawnInterval","spawnPowerUp","canvas","score","currentTime","Date","now","powerUpTypes","type","color","icon","duration","value","powerUpType","Math","floor","random","length","powerUp","x","width","y","height","push","updatePowerUps","filter","getPowerUps","removePowerUp","powerUpId","splice","collectPowerUp","player","health","min","maxHealth","lives","rapidFire","rapidFireTime","hasShield","shieldTime","doubleShot","speed","maxSpeed","wingFighters","id","targetX","targetY","offset"],"sources":["/Users/ronellbradley/Desktop/Kaden & Adelynn Space Adventures/src/systems/PowerUpSystem.ts"],"sourcesContent":["import { PowerUp } from '../types/GameTypes';\n\nexport class PowerUpSystem {\n  private powerUps: PowerUp[] = [];\n  private spawnTimer: number = 0;\n  private spawnInterval: number = 5000; // 5 seconds\n\n  spawnPowerUp(canvas: HTMLCanvasElement, score: number): PowerUp | null {\n    const currentTime = Date.now();\n    \n    // Spawn power-up every 5 seconds or when score reaches certain thresholds\n    if (currentTime - this.spawnTimer > this.spawnInterval || \n        (score > 0 && score % 2000 === 0)) {\n      \n      const powerUpTypes = [\n        {\n          type: 'score',\n          color: '#ffff00',\n          icon: '💎',\n          duration: 0,\n          value: 500\n        },\n        {\n          type: 'health',\n          color: '#ff0000',\n          icon: '❤️',\n          duration: 0,\n          value: 25\n        },\n        {\n          type: 'life',\n          color: '#ff00ff',\n          icon: '👤',\n          duration: 0,\n          value: 1\n        },\n        {\n          type: 'rapid',\n          color: '#00ffff',\n          icon: '⚡',\n          duration: 3000,\n          value: 1\n        },\n        {\n          type: 'shield',\n          color: '#0000ff',\n          icon: '🛡️',\n          duration: 5000,\n          value: 1\n        },\n        {\n          type: 'weapon',\n          color: '#00ff00',\n          icon: '🔫',\n          duration: 0,\n          value: 1\n        },\n        {\n          type: 'double',\n          color: '#ff6600',\n          icon: '🔫⚡',\n          duration: 10000,\n          value: 1\n        },\n        {\n          type: 'speed',\n          color: '#6600ff',\n          icon: '🚀',\n          duration: 8000,\n          value: 2\n        },\n        {\n          type: 'wing',\n          color: '#ff0066',\n          icon: '✈️',\n          duration: 0,\n          value: 1\n        }\n      ];\n      \n      const powerUpType = powerUpTypes[Math.floor(Math.random() * powerUpTypes.length)];\n      \n      const powerUp: PowerUp = {\n        x: Math.random() * (canvas.width - 20),\n        y: -20,\n        width: 20,\n        height: 20,\n        type: powerUpType.type,\n        color: powerUpType.color,\n        icon: powerUpType.icon,\n        duration: powerUpType.duration,\n        value: powerUpType.value\n      };\n\n      this.powerUps.push(powerUp);\n      this.spawnTimer = currentTime;\n      \n      return powerUp;\n    }\n    \n    return null;\n  }\n\n  updatePowerUps(canvas: HTMLCanvasElement): void {\n    this.powerUps = this.powerUps.filter(powerUp => {\n      powerUp.y += 2;\n      return powerUp.y < canvas.height + powerUp.height;\n    });\n  }\n\n  getPowerUps(): PowerUp[] {\n    return this.powerUps;\n  }\n\n  removePowerUp(powerUpId: number): void {\n    this.powerUps.splice(powerUpId, 1);\n  }\n\n  collectPowerUp(powerUp: PowerUp, player: any): void {\n    switch (powerUp.type) {\n      case 'score':\n        player.score += powerUp.value;\n        break;\n      case 'health':\n        player.health = Math.min(player.maxHealth, player.health + powerUp.value);\n        break;\n      case 'life':\n        player.lives += powerUp.value;\n        break;\n      case 'rapid':\n        player.rapidFire = true;\n        player.rapidFireTime = powerUp.duration;\n        break;\n      case 'shield':\n        player.hasShield = true;\n        player.shieldTime = powerUp.duration;\n        break;\n      case 'double':\n        player.doubleShot = true;\n        break;\n      case 'speed':\n        player.speed = Math.min(player.maxSpeed, player.speed + powerUp.value);\n        break;\n      case 'wing':\n        if (player.wingFighters.length < 2) {\n          player.wingFighters.push({\n            id: `wing_${Date.now()}`,\n            x: player.x - 50,\n            y: player.y,\n            width: player.width,\n            height: player.height,\n            speed: player.speed,\n            targetX: player.x - 50,\n            targetY: player.y,\n            offset: player.wingFighters.length === 0 ? -50 : 50\n          });\n        }\n        break;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}